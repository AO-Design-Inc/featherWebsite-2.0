{"slug":"3-2021-in-Review","title":"Looking Back at 2021, Gearing For Launch","date":"2022-1-21","summary":"Over the past year we’ve done a lot to rapidly build up a prototype, and have finally reached a point where we’ve been using it on your own workflows.","thumbnail":"/blog-3-review-thumbnail.webp","tags":["Update","Engineering"],"author":"Kyle Li, Jo Gao","html":"<p>2021 has been an exciting year for Feather. </p>\n<p>We’ve made massive strides towards reaching feature parity with key players in our field, expanded our team, and have plans for even more in 2022 (including a public launch!).</p>\n<iframe style=\"width: 100%;\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zh7jbxOZipw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><em>P.S. Stay tuned until the end of the video Progress Report to view a demo of Feather in action through long distances (Atlanta → New York).</em></p>\n<h2>Progress So Far</h2>\n<p>Over the past year we’ve done a lot to rapidly build up a prototype, and have finally reached a point where we’ve been using it on your own workflows. </p>\n<p><strong>Remote Desktop:</strong> FeatherStream currently allows users to access their full desktop remotely from any other PC utilizing webRTC.</p>\n<p><strong>Cross OS Support:</strong> We have successfully configured CI for this project to automatically give us Linux, Windows, and MacOS builds for testing.</p>\n<p><strong>Multi-Server Support:</strong> To prepare for future plans in load balancing, FeatherStream allows you to set up and connect to multiple servers from the same client device, seamlessly across multiple devices and vice versa.</p>\n<p>All of this has brought Feather up to speed with other remote desktop solutions in months, building the core of our future innovations.</p>\n<h2>The Feather Vision</h2>\n<p>Feather isn’t simply a Remote Desktop. In fact, we looked at the clunky existing remote desktop and VDI infrastructure and found it unusable. It’s not their fault. The fact is that simply streaming the entire desktop as a video can never feel like you’re natively browsing windows on your machine.</p>\n<p>Feather isn’t a Remote Desktop because it’s a way for you to transform your home PC into a router for processing power itself. Anyone connected to your local Wi-Fi network should be able to accelerate the processing power they have available on the weakest of devices. Connecting to another machine should feel as smooth as running an app on your own device… and making these connections should be as simple and easily understood as connecting to Wi-Fi itself. </p>\n<h2>Looking Forward</h2>\n<p>We’re a little ambitious, and it won’t be easy. This year, we have a few steps planned to achieve our vision.</p>\n<p><strong>Individual Windows</strong>: Moving forward, we will implement application-level video streaming so users can access specific programs remotely. Users will be able to use different applications with a near-native experience.</p>\n<p><strong>Cross-Platform Files:</strong> We will add a shared clipboard mechanism so users can copy and paste between their local and remote devices without problems. We will be setting up a file system view for users to be able to access both local and remote files and a way to transfer and share files between devices.</p>\n<p><strong>Alpha Testing:</strong> We will continue to improve and develop our testing framework to start multiple instances of FeatherStream and help us release more robust versions of this product.</p>\n<p>If you’re interested in being the first to hear about how we’re changing remote access, make sure to subscribe to the Feather newsletter.</p>\n<p>It has been an exciting year as we begin to gear up to bring Feather into the public eye. Lots have been celebrated, improved, and learned. We have exciting news planned for our next monthly update, so stay tuned to learn more because even we can’t wait to see what comes next. </p>\n<ul><li>Feather Team</li></ul>","css":{"code":"","map":null},"head":"","readingTime":"3 min read","relatedPosts":[{"slug":"2-webgl","title":"WebGL with Emscripten: The Bare Minimum","date":"2021-08-03T00:00:00.000Z","summary":"Illustrating the bare minimum required to get WebGL up and running in C with the Emscripten compiler.","thumbnail":"/blog-2-tri-thumbnail.webp","tags":["Engineering"],"author":"Jo Gao","html":"<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-2-tri-thumbnail.webp\" alt=\"Thumbnail\"></div>\n\n<p>The following article is something of a hybrid between the first <a href=\"https://emscripten.org/docs/getting_started/Tutorial.html\" rel=\"nofollow\">Emscripten tutorial</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\" rel=\"nofollow\">Getting Started with WebGL tutorial</a>. It builds on the previous documentation to demonstrate how to render the same content in the WebGL tutorial, but in C.</p>\n<p>This is not an Introduction to C programming or WebGL, so a basic understanding of both will be helpful. If you are new to WebGL, I would recommend at least skimming the Getting Started with WebGL tutorial linked above.</p>\n<p>The focus of this article is to illustrate the bare minimum required to get WebGL up and running in C with the Emscripten compiler. And thus, if you do not yet have Emscripten installed, I would suggest doing so now from their <a href=\"https://emscripten.org/docs/getting_started/downloads.html\" rel=\"nofollow\">download page</a>.</p>\n<p>The Github repo for this tutorial is available on our <a href=\"https://github.com/AO-Design-Inc/webGL-with-emscripten\" rel=\"nofollow\">Github</a>.</p>\n<h2>HTML File</h2>\n<p>The following is a barebones HTML file with a canvas element. The <code>index.js</code> script after the canvas is the file that will be generated from compiling the C code.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot; /&gt;\n\t\t&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n\t\t&lt;title&gt;Document&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;canvas id=&quot;canvas&quot; height=&quot;400px&quot; width=&quot;400px&quot;&gt;&lt;/canvas&gt;\n\t\t&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n&lt;h1&gt;This is a header&lt;/h1&gt;\n</code></pre>\n<h2>Header Files</h2>\n<pre><code class=\"language-c\">#include &lt;emscripten/html5.h&gt;\n#include &lt;GLES2/gl2.h&gt;\n</code></pre>\n<p>The html5 header provides the bindings required to use html elements and events from native code. For this tutorial, it will allow us to set up the WebGL context in C. You can view the full documentation for <code>emscripten/html.5.h</code> <a href=\"https://emscripten.org/docs/api_reference/html5.h.html\" rel=\"nofollow\">here</a></p>\n<p>The gl2 header provides the functions to draw and interact with the canvas context. The entire header file can be found <a href=\"https://www.khronos.org/registry/OpenGL/api/GLES2/gl2.h\" rel=\"nofollow\">here</a>.</p>\n<h2>Setting up the Canvas</h2>\n<p>Before we can begin drawing, we must first obtain a canvas context. The html5 header file provides the functions needed to do this. To create a canvas context, the <code>emscripten_webgl_create_context</code> function takes a target and an <code>EmscriptenWebGLContextAttributes</code> object, used to specify various attributes for the context. A complete list of the object’s attributes can be found <a href=\"https://emscripten.org/docs/api_reference/html5.h.html#c.EmscriptenWebGLContextAttributes\" rel=\"nofollow\">here</a>.</p>\n<pre class=\"language-c\"><!-- HTML_TAG_START --><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// beginning of main function</span>\n\n\t<span class=\"token comment\">// setting up EmscriptenWebGLContextAttributes</span>\n\tEmscriptenWebGLContextAttributes attr<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">emscripten_webgl_init_context_attributes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattr<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// target the canvas selector</span>\n\tEMSCRIPTEN_WEBGL_CONTEXT_HANDLE ctx <span class=\"token operator\">=</span> <span class=\"token function\">emscripten_webgl_create_context</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#canvas\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">emscripten_webgl_make_context_current</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<p>At the start of the main function, we create and initialize the <code>EmscriptenWebGLContextAttributes</code> object with all the default attributes settings except the alpha attribute, which is set to false. This is done mostly for the purpose of illustrating how to set specific attributes.</p>\n<p>The <code>emscripten_webgl_create_context</code> function targets, <code>#canvas</code>, the selector for the canvas element in the html file. After creating the context, we must activate it using <code>emscripten_webgl_make_context_current</code>, to specify that all following GL calls will be applied to that context.</p>\n<h2>Drawing to the Canvas</h2>\n<p>In JavaScript, we would use <code>clearColor</code> and <code>clear</code> on the canvas context to fill in the canvas. The equivalents of these methods are provided by the gl2 header as <code>glClearColor</code> and <code>glClear</code>.</p>\n<pre><code class=\"language-c\">// this goes after you have activated the webgl context\n\tglClearColor(0.984, 0.4627, 0.502, 1.0);\n\tglClear(GL_COLOR_BUFFER_BIT);\n\treturn 1;\n} // end of main function\n</code></pre>\n<h2>Compiling and Running</h2>\n<p>To compile with Emscripten, run the following command. This will output the index.js file that is sourced from the html file.</p>\n<pre><code class=\"language-bash\">emcc main.c -o index.js\n</code></pre>\n<p>The html file can now be opened and viewed in a browser. Huzzah!</p>\n<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-2-tri-final.jpg\" alt=\"Final\"></div>","css":{"code":"","map":null},"head":"","readingTime":"4 min read"},{"slug":"1-mandel","title":"One of the Fastest Web Mandelbrot Renderers","date":"2021-06-21T00:00:00.000Z","summary":"Our initial experiments rendering the Mandelbrot set with JavaScript, Web-workers & emerging web technologies like webassembly.","thumbnail":"/blog-1-mandel-thumbnail.webp","tags":["Engineering"],"author":"Ojasvin Kirpane, Abhishek Cherath, Jo Gao & Abhinuv Allu","html":"<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-1-mandel-thumbnail.webp\" alt=\"Thumbnail\"></div>\n<h2>Introduction</h2>\n<p>Hey, welcome to the Feather Systems blog. This is the first post of many, documenting our journey towards creating simpler systems for better performance on the web. This post will document our initial experiments rendering the Mandelbrot set with JavaScript, Web-workers &amp; emerging web technologies like webassembly. You can access the project <a href=\"https://js-wasm-mandelbrot-benchmark-3.vercel.app/\" rel=\"nofollow\">here</a> and view the code <a href=\"https://github.com/AO-Design-Inc/js-wasm-mandelbrot-benchmark\" rel=\"nofollow\">here</a>. These experiments were tested and measured by the team to properly document each technology’s advantages &amp; disadvantages.</p>\n<p>To elucidate, let’s start with fractals &amp; the mandelbrot set:</p>\n<h2>The Mandelbrot Set</h2>\n<p>The Mandelbrot Set is defined as the set of complex numbers for which the function \n\n<!-- HTML_TAG_START --><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∗</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mo>=</mo><msubsup><mi>z</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">z*{n+1}=z_n^2+c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0611em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.453em;margin-left:-0.044em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span><!-- HTML_TAG_END --> does not diverge when \n\n<!-- HTML_TAG_START --><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">z_{0}=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.044em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span><!-- HTML_TAG_END -->. An image of how the Mandelbrot set looks as follows. Points shaded black are in the set. We are using the Mandelbrot set to benchmark our code.</p>\n<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-1-mandel-renderer.png\" alt=\"Thumbnail\"></div>\n<p>The Mandelbrot Set is stunning. We highly recommend getting lost in its beauty using our rendering website (<a href=\"https://mandelbrot-ascript.vercel.app/\" rel=\"nofollow\">https://mandelbrot-ascript.vercel.app/</a>). Click to zoom and Shift + Click to zoom out.</p>\n<h2>Benchmark Structure</h2>\n<p><a href=\"https://js-wasm-mandelbrot-benchmark-3.vercel.app/\" rel=\"nofollow\">The benchmarking site</a> is designed to display each iteration we developed with a rough estimate for performance measured in milliseconds. For each version, a function was written to perform the Mandelbrot calculations and return a JavaScript ImageData object that could be easily put on the Canvas. Once the user selects a version from the drop down menu, the corresponding function is called. Since the functions can take some time to complete, they are called from a Web-worker to prevent the main thread from freezing while the function runs. The performance is calculated using <code>performance.now()</code> calls before and after the function call that returns the ImageData object.</p>\n<p>Across all iterations, I used the following values:</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">START_X_TOTAL</span><span class=\"token operator\">:</span> f32 <span class=\"token operator\">=</span> <span class=\"token number\">0.300283</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">START_Y_TOTAL</span><span class=\"token operator\">:</span> f32 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.48857</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">:</span> f32 <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> step_X<span class=\"token operator\">:</span> f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span> <span class=\"token operator\">/</span> <span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> step_Y<span class=\"token operator\">:</span> f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span> <span class=\"token operator\">/</span> <span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ITER_CONST</span><span class=\"token operator\">:</span> i32 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<p><strong>FOR MULTITHREADED</strong></p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N_THREADS</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<p>We assume that the canvas width and height are integers. To determine if a point was in the Mandelbrot set, we iterated the Mandelbrot function on the point up to <code>ITER_CONST</code>, returning the number of times the function had iterated. We use the returned Mandelbrot value to set the color.</p>\n<p>You may notice that RGB values get clamped at 255, making it seem like the exercise of iterating all the way to 1000 is just for the sake of testing performance, which it is. (Here is a whole list of <a href=\"https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set\" rel=\"nofollow\">smarter and better coloring algorithms</a> that we will not be using in this benchmarking exercise.)</p>\n<p>As of when this article was published, the following versions are available on the Benchmarking Site:</p>\n<ul><li>Naive JS single threaded</li>\n<li>Rust WASM using bindgen (single threaded)</li>\n<li>Assemblyscript old version (single threaded, not thread safe)</li>\n<li>Assemblyscript new version (single threaded, thread safe)</li>\n<li>Assemblyscript SIMD WASM (singlethreaded, multithreaded)</li>\n<li>New JS(less memory allocation) singlethreaded</li>\n<li>New JS SharedMemoryBuffer multithreaded</li></ul>\n<br>\n<br>\n<h2>Implementing the Mandelbrot Set in JavaScript <em>by Abhinuv Allu</em></h2>\n<details><summary>Click to Read</summary>\n<p>I began the testing process with the web’s best frenemy, Javascipt.</p>\n<p>I started with a naive approach to implement the Mandelbrot set in JavaScript and then try and optimize later. I started by creating a class for Complex numbers. This class would be able to add, multiply and return the magnitude. For the magnitude, I used a library function Math.hypot. Down below is our first initial implementation of the Complex class.</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">real<span class=\"token punctuation\">,</span> imag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//Function that add this complex number with another complex number, cplx</span>\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cplx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">+=</span> cplx<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">+=</span> cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//Fuction that returns the magnitude of this complex number</span>\n\t<span class=\"token function\">mag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cplx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//Function that multiplies this complex number with another complex number, cplx</span>\n\t<span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cplx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> real_part <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">*</span> cplx<span class=\"token punctuation\">.</span>real <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">*</span> cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> imag_part <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">*</span> cplx<span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">*</span> cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real_part<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag_part<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>The program iterated through each element of the canvas to compute whether or not they were in the Mandelbrot set.</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cplx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">mag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ITER_CONST</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tz <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cplx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>These data points were added to an array which is then painted onto the Canvas. I had some ideas about optimizations with help from the profiler, however the most fascinating insight was that the Math.hypot function for two numbers is an order of magnitude slower than squaring, adding, and then computing the square root. During the profiling of the initial code I found out that Math.hypot was taking up most of the time.</p>\n<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-1-mandel-hypnot.png\" alt=\"Thumbnail\"></div>\n\n<h3>Improved JavaScript</h3>\n<p>To improve the initial naive approach, I decided to add multithreading. I started this with a naive way of having the worker compute each point and then send it back to receive the next point but, the message overhead was immense and resulted in a single threaded function as I only had one worker. The next step was experimenting with divisibility classes to add multiple workers. But this had the same problem where the overhead of sending &amp; receiving a message from the workers was just too much. Eventually, I figured out that I would have each worker compute a set number of rows at a time.</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token comment\">//This is in the main function which calls the workers to do the work</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">INDEXES_PER_WORKER</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X_LEN</span><span class=\"token operator\">*</span><span class=\"token constant\">Y_LEN</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>workerCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X_LEN</span><span class=\"token operator\">/</span>workerCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">START_XC</span> <span class=\"token operator\">=</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">START_INDEX</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token constant\">INDEXES_PER_WORKER</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">END_INDEX</span><span class=\"token operator\">=</span> <span class=\"token constant\">START_INDEX</span> <span class=\"token operator\">+</span> <span class=\"token constant\">INDEXES_PER_WORKER</span><span class=\"token punctuation\">;</span>\n\n  worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPUTED_ROWS</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    points_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token constant\">COMPUTED_ROWS</span><span class=\"token punctuation\">;</span>\n     doneCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>doneCount <span class=\"token operator\">==</span> workerCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      points_array <span class=\"token operator\">=</span> points_array<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n      <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>points_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token comment\">//This is how it looks now in the worker function</span>\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">START_XC</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y_LEN</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> points_in_thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Y_LEN</span> <span class=\"token operator\">*</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.0</span> <span class=\"token operator\">+</span> <span class=\"token constant\">START_XC</span> <span class=\"token operator\">*</span> <span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span> count_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tcount_x <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">;</span>\n\t\tx <span class=\"token operator\">+=</span> <span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span> count_x<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> count_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_y <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Y_LEN</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> <span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span> count_y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tpoints_in_thread<span class=\"token punctuation\">[</span>count_x <span class=\"token operator\">*</span> <span class=\"token constant\">Y_LEN</span> <span class=\"token operator\">+</span> count_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>points_in_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<h3>Shared Buffer</h3>\n<p>Since all the points would be added to the same array it would make sense that having a shared buffer to reduce the overhead needed to send array points would decrease the compute time. So I added a shared buffer that was formatted like an ImageData object so it would be easier to paint it onto the canvas. This required some rewriting of the some steps here and there, but it ended up being faster.</p>\n<p>The other issue with using a Shared Buffer is that I had to add promises to the code, so werefactored it to include promises.</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token comment\">//This is in the main function which calls the workers to do the work</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"benchmarks/multithreaded-js/sharedworker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker finished\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">returnSharedBufferjs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">START_Y_TOTAL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANVAS_WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANVAS_HEIGHT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WINDOW</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">X_LEN</span> <span class=\"token operator\">=</span> <span class=\"token constant\">CANVAS_WIDTH</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">Y_LEN</span> <span class=\"token operator\">=</span> <span class=\"token constant\">CANVAS_HEIGHT</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> window <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">STEP_X</span> <span class=\"token operator\">=</span> window<span class=\"token operator\">/</span><span class=\"token constant\">X_LEN</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">STEP_Y</span> <span class=\"token operator\">=</span> window<span class=\"token operator\">/</span><span class=\"token constant\">Y_LEN</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> workerCount <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> sharedBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X_LEN</span><span class=\"token operator\">*</span><span class=\"token constant\">Y_LEN</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> sharedArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8ClampedArray</span><span class=\"token punctuation\">(</span>sharedBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sharedArray<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X_LEN</span><span class=\"token operator\">/</span>workerCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">START_YC</span> <span class=\"token operator\">=</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">START_Y_TOTAL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">START_YC</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X_LEN</span><span class=\"token punctuation\">,</span> sharedArray<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>workerCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    parameters<span class=\"token punctuation\">.</span><span class=\"token constant\">START_YC</span> <span class=\"token operator\">=</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\n    promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">createWorker</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\"><span class=\"token comment\">//This is how it looks now in the worker function</span>\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">START_Y_TOTAL</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">START_YC</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">N_ROWS_PER_THREAD</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">X_LEN</span><span class=\"token punctuation\">,</span>\n\t\tsharedArray\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token constant\">START_Y_TOTAL</span> <span class=\"token operator\">+</span> <span class=\"token constant\">START_YC</span> <span class=\"token operator\">*</span> <span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span> count_y <span class=\"token operator\">=</span> <span class=\"token constant\">START_YC</span><span class=\"token punctuation\">;</span>\n\t\tcount_y <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N_ROWS_PER_THREAD</span> <span class=\"token operator\">+</span> <span class=\"token constant\">START_YC</span><span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">+=</span> <span class=\"token constant\">STEP_Y</span><span class=\"token punctuation\">,</span> count_y<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span> count_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_x <span class=\"token operator\">&lt;</span> <span class=\"token constant\">X_LEN</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> <span class=\"token constant\">STEP_X</span><span class=\"token punctuation\">,</span> count_x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>count_x <span class=\"token operator\">+</span> count_y <span class=\"token operator\">*</span> <span class=\"token constant\">X_LEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tval <span class=\"token operator\">=</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsharedArray<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t\t\tsharedArray<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t\t\tsharedArray<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t\t\tsharedArray<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n<p>These changes made the code perform a lot better. You can check out it’s performance in the ”<a href=\"https://www.notion.so/On-WebAssembly-Performance-and-the-Mandelbrot-WORKING-TITLE-96760f3f113343c894c00f52cdef3ef0\" rel=\"nofollow\">Results</a>” section. JavaScript was extremely performant (especially on Chrome) and gave us hope that pushing the boundaries of speed on the web was possible.</p></details>\n<br>\n<br>\n<h2>So, What is Webassembly? <em>by Abhishek Cherath</em></h2>\n<details><summary>Click to Read</summary>\n<p>In our quest to further optimize performance, we used webassembly, an emerging web technology optimized for what we are trying to achieve. So, what is it?\nInsofar as an overview is concerned, nothing beats Lin Clark’s cartoon intro <a href=\"https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/\" rel=\"nofollow\">here</a>, and the MDN docs <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\" rel=\"nofollow\">here</a>. Put simply, webassembly is a low level typed language that targets the browser’s VM. For some reasons[1] , it’s very quick and easy to compile into decently fast machine code.</p>\n<p>Fundamentally, the language was designed to offer the best possible latency (time to execution) and speed of execution. Low latency is achieved by having a small binary representation (vs javascript’s textual representation) and having type definitions and a function table at the start of a .wasm module, which allows compilers to compile in a streaming fashion, instead of needing to have access to the entire file before starting.</p>\n<p>Speed of execution requires slow compilation with multiple passes for the compiler to accurately assess the best register allocation, optimize out unnecessary instructions and do whatever other things compilers do. (<em>note: I have frankly no idea what goes into compiler optimization, I just know it takes time</em>)</p>\n<p>To satisfy both these goals, browsers (atleast Firefox and Chrome) have two compilers for webassembly, the first compiles the module as it’s called from the network, and is basically instant (<a href=\"https://v8.dev/docs/wasm-compilation-pipeline\" rel=\"nofollow\">here</a>, chrome devs claim that theirs can do on the order of 10+ mb of code per second, so the bottleneck will almost always be the speed of the network rather than the compiler.) The second does optimization and dynamically replaces the unoptimized bytecode from the first when it’s done.</p>\n<p>It’s interesting to note here that, <em>a priori</em> there’s no reason to expect that webassembly code for high performance stuff [2] (like fractal calculation) will be any faster than its javascript counterpart. Since the hot loop (calculating escape time) is running many thousands of times, one would expect the javascript JIT compiler to infer the output types and get basically similar bytecode, while amortizing its greater overhead considering workload size.</p>\n<p>In a later article, I will be examining this conjecture, and taking a deeper look at the flamegraphs and bytecode generated by our benchmarks.</p>\n<p>The other interesting thing about webassembly is its memory model, programs do not have access to their own instructions and stack machine memory (so no self modifying code, and no messing with values on the stack). What they do have access to is a block of linear memory, which is backed by a javascript ArrayBuffer, and byte addressed (ie. memory[0] is 1 byte long.)</p>\n<p><em>[1]I’m not entirely sure why, but it’s some combination of coding for a simple stack machine, having type information, linear memory, and being easy to parse.</em></p>\n<p><em>[2]This is <strong>mostly</strong> true, except for vectorization. SIMD (Single Instruction Multiple Data) instructions are featured in the webassembly spec and implemented by chrome and firefox, which do not expose them in js, and have no plans to do so. (although</em> I <em>suppose there’s nothing stopping a JIT from autovectorizing, is there?)</em></p></details>\n<br><br>\n<blockquote><p><strong>Our Approach to webassembly</strong>: As many languages can be compiled to webassembly, we looked at two of the most commonly used ones: Rust &amp; AssemblyScript. In the following sections we will describe our approach to these two languages.</p></blockquote>\n<br><br>\n<h2>Rust Implementation <em>by Jo Gao</em></h2>\n<details><summary>Click to Read</summary>\n<h3>Singlethreaded</h3>\n<p>I wrote a similar implementation of the function in Rust that would return an ImageData object of the Mandelbrot Set. It uses <a href=\"https://rustwasm.github.io/wasm-bindgen/\" rel=\"nofollow\">wasm-bindgen</a>, a Rust library that will compile Rust code to webassembly, and then generate the bindings and glue between JavaScript and webassembly so that it can be run on the web. It handles all the type conversions between JavaScript and webassembly and facilitates the compilation of Rust to webassembly.</p>\n<p>In the iterative <code>in_mandelbrot</code> function, <code>count</code> is set to iterate all the way to 1000 for benchmarking purposes. When returning, <code>count</code> is set to 255 if larger than 255 to prevent having to cast numbers larger than 255 to u8.</p>\n<pre class=\"language-rust\"><!-- HTML_TAG_START --><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">in_mandelbrot</span><span class=\"token punctuation\">(</span>cplx<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Complex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">ITER_CONST</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> z <span class=\"token operator\">=</span> <span class=\"token function\">build_complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">mag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ITER_CONST</span> <span class=\"token punctuation\">&#123;</span>\n        z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cplx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// z = z^2 + cplx</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">></span> <span class=\"token number\">255</span> <span class=\"token punctuation\">&#123;</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    count <span class=\"token keyword\">as</span> <span class=\"token keyword\">u8</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>The magic of wasm-bindgen kicks in here, allowing us to create the ImageData object right in the Rust code by providing the type and the constructor signature:</p>\n<pre class=\"language-rust\"><!-- HTML_TAG_START --><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token attribute attr-name\">#[wasm_bindgen(constructor, catch)]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Uint8ClampedArray</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsValue</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">let</span> y_len<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> height <span class=\"token keyword\">as</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x_len<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> width <span class=\"token keyword\">as</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> pixels<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x_len <span class=\"token operator\">*</span> y_len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> points_array <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> pixels<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill_mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> points_array<span class=\"token punctuation\">,</span> start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> x_len<span class=\"token punctuation\">,</span> y_len<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> pointer <span class=\"token operator\">=</span> points_array<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> mem <span class=\"token operator\">=</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span></span><span class=\"token function\">memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unchecked_into</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">WebAssembly</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Memory</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> <span class=\"token class-name\">Uint8ClampedArray</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>pointer <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pointer <span class=\"token operator\">+</span> pixels<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_array<span class=\"token punctuation\">,</span> x_len<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y_len<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>After compiling this code, wasm-bindgen outputs a number of files that are meant to be bundled using <a href=\"https://webpack.js.org/\" rel=\"nofollow\">Webpack</a> and imported to your JavaScript file as an ES6 module, allowing access to the functions that were written in Rust. The idea is that after compiling and importing the module, calling <code>run(...)</code>would return a whole JavaScript ImageData Object.</p>\n<p>Unfortunately, our Benchmarking Site is structured to use a web worker to call this function. Modules cannot be imported to web workers. However, they can be imported to module workers, web workers that support module import, but as of today, Firefox does not support this feature.</p>\n<p>This is an infeasible solution because I was unwilling to limit the availability of our benchmark site for this implementation. After many hours of tinkering with the existing setup, I found a workaround that eliminated the need for Webpack altogether: after compiling with wasm-bindgen, I copy and pasted the entire outputted .js file with the import and exports removed, appended the wrapper function I had written to it, and called <code>init(...)</code> on the outputted .wasm.</p>\n<p>After confirming that this worked, A colleague and I wrote a shell script to automatically do this after compilation. Albeit a little unpleasant on the eyes, it does the job:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'/importW/d;s/^export//g;/default/d'</span> pkg/Mandelbrot.js <span class=\"token operator\">></span> tmp_mandel_import.js\n<span class=\"token function\">cat</span> tmp_mandel_import.js  mandel_src.js <span class=\"token operator\">></span> Mandelbrot.js\n<span class=\"token function\">rm</span> tmp_mandel_import.js</code><!-- HTML_TAG_END --></pre>\n<h3>Rust &amp; Webassembly Multi-Threaded</h3>\n<p>To further improve performance in Rust, I carried out the same calculations, but in parallel this time. An advantage of the Mandelbrot Set is that determining whether a pixel falls within the set or not can be done completely independently of other pixels. The outcome of each pixel has no effect on the others, making the transition to multithreading straightforward.</p>\n<p>I used the <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/master/examples/raytrace-parallel\" rel=\"nofollow\">Parallel Raytracing example</a>. given in the Wasm-Bindgen repo, as a starting point. Using a combination of web workers and the Rayon Crate for data parallelism in Rust yielded a pretty fast multithreaded Mandelbrot Set.</p>\n<p><em>Unfortunately,</em> I <em>was unable to include this version of the Mandelbrot in the final Benchmarking website</em> because I ran into a similar problem with the wasm-bindgen and module output. This time, it was further complicated by the Webworkers being created from within the Rust code. The funky workaround that had allowed for the singlethreaded RustWasm example to run on the Benchmarking Site failed to work the same magic for this implementation.</p>\n<p>This version of the Mandelbrot also makes use of the SharedArrayBuffer, and had it been on the site, would not work in Safari and browsers that do not support SharedArrayBuffer Objects.</p></details>\n<br>\n<br>\n<h2>AssemblyScript <em>by Abhishek Cherath</em></h2>\n<details><summary>Click to Read</summary>\n<p>AssemblyScript compiles a subset of typescript to webassembly. To get an idea of how simple it is to write it, here’s essentially the same javascript code from earlier, with type annotations and minor changes for webassembly:</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\">declare <span class=\"token keyword\">const</span> canvas_width<span class=\"token operator\">:</span> i32<span class=\"token punctuation\">;</span>\ndeclare <span class=\"token keyword\">const</span> canvas_height<span class=\"token operator\">:</span> i32<span class=\"token punctuation\">;</span>\ndeclare <span class=\"token keyword\">const</span> <span class=\"token constant\">ITER_CONST</span><span class=\"token operator\">:</span> i16<span class=\"token punctuation\">;</span>\ndeclare <span class=\"token keyword\">const</span> <span class=\"token constant\">START_X_TOTAL</span><span class=\"token operator\">:</span>f32\ndeclare <span class=\"token keyword\">const</span> <span class=\"token constant\">START_Y_TOTAL</span><span class=\"token operator\">:</span>f32\ndeclare <span class=\"token keyword\">const</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">:</span>f32\n\n@unmanaged\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Complex</span> <span class=\"token punctuation\">&#123;</span>\n\treal<span class=\"token operator\">:</span> f64 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\timag<span class=\"token operator\">:</span> f64 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">real<span class=\"token operator\">:</span>f64<span class=\"token punctuation\">,</span> imag<span class=\"token operator\">:</span>f64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t@inline\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cplx<span class=\"token operator\">:</span> Complex<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Complex <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> cplx<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">+</span> cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t@inline\n\t<span class=\"token function\">mag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> f64 <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t@inline\n\t<span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>cplx<span class=\"token operator\">:</span> Complex<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Complex <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> __tempr  <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real<span class=\"token operator\">*</span>cplx<span class=\"token punctuation\">.</span>real <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag<span class=\"token operator\">*</span>cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> __tempi <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag<span class=\"token operator\">*</span>cplx<span class=\"token punctuation\">.</span>real <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real<span class=\"token operator\">*</span>cplx<span class=\"token punctuation\">.</span>imag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> __tempr<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> __tempi<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>real<span class=\"token operator\">:</span>f64<span class=\"token punctuation\">,</span>imag<span class=\"token operator\">:</span>f64<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>real <span class=\"token operator\">=</span> real<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imag <span class=\"token operator\">=</span> imag<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> z<span class=\"token operator\">:</span>Complex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cplx<span class=\"token operator\">:</span>Complex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n@inline\n<span class=\"token keyword\">function</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">real<span class=\"token operator\">:</span>f64<span class=\"token punctuation\">,</span>imag<span class=\"token operator\">:</span>f64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>i16<span class=\"token punctuation\">&#123;</span>\n\tz<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tcplx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>real<span class=\"token punctuation\">,</span>imag<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">let</span> count<span class=\"token operator\">:</span>i16 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">mag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cplx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// z = z^2 + cplx</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token constant\">ITER_CONST</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nstores array of i16s at start of memory\ncorresponding to escape count at pixels in\narray\n*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> memcounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">const</span> step_X<span class=\"token operator\">:</span>f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">/</span><span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> step_Y<span class=\"token operator\">:</span>f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">/</span><span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token constant\">START_Y_TOTAL</span><span class=\"token punctuation\">,</span> count_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_y <span class=\"token operator\">&lt;</span> canvas_height<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> step_Y<span class=\"token punctuation\">,</span> count_y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span> count_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_x <span class=\"token operator\">&lt;</span> canvas_width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> step_X<span class=\"token punctuation\">,</span> count_x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tstore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i16</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(memcounter, mandelbrot(x,y));\n\t\t\tmemcounter += 2\n\t\t&#125;\n\t&#125;\n&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>The only really noteworthy change was to not have <code>new</code> in the hot loop. The Assemblyscript garbage collector had some trouble with it and total allocation would exceed webassembly’s 100 page memory limit[1]. I suspect that sort of code will be usable once the webassembly GC proposals, which allow wasm modules to hook into the browser’s GC, are implemented.</p>\n<h3>Threading</h3>\n<p>The fastest way to thread code in browsers is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" rel=\"nofollow\">SharedArrayBuffer</a>, this also requires the following CORS headers.</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\">Cross<span class=\"token operator\">-</span>Origin<span class=\"token operator\">-</span>Opener<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> same<span class=\"token operator\">-</span>origin\nCross<span class=\"token operator\">-</span>Origin<span class=\"token operator\">-</span>Embedder<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> require<span class=\"token operator\">-</span>corp</code><!-- HTML_TAG_END --></pre>\n<p>This is to ensure cross-origin isolation, which protects against memory being exfiltrated somehow (I might explore this in the future, but that’s about all I know for the moment.) webassembly memories can also be created with a backing SharedArrayBuffer, which allows fast multithreading, as separate web-workers can run the same webassembly module and write their results to the same memory, meaning that large objects don’t need to be passed around using postmessage, and the many O(N) overheads to do with copying and creating new arrays can be avoided.</p>\n<p>However, while Assemblyscript <a href=\"https://www.assemblyscript.org/stdlib/builtins.html#atomics-%F0%9F%A6%84\" rel=\"nofollow\">allows</a> access to atomic instructions, it does not implement any sort of locking. So any program that reads and writes to memory will need to be adjusted to thread with shared memory. This means that the program seen above, with its Complex class and set calls reading and wrxiting to the linear memory quite often, is very prone to… interesting behaviour when threaded.</p>\n<div align=\"center\"><img style=\"width: 100%\" src=\"/blog-1-mandel-glitch.png\" alt=\"Thumbnail\"></div>\n\n<p>Exhibit A of nondeterministic behavior</p>\n<p>That being said, for small examples such as fractal calculation, it’s quite easy to limit mutability to local variables (which are on the stack, not in the linear memory, and so are not shared) and avoid the problem entirely. Like in the following code:</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\">@inline\n<span class=\"token keyword\">function</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c_r<span class=\"token operator\">:</span>f64<span class=\"token punctuation\">,</span> c_i<span class=\"token operator\">:</span>f64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>i16<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> count<span class=\"token operator\">:</span>i16 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> z_r<span class=\"token operator\">:</span>f64 <span class=\"token operator\">=</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> z_i<span class=\"token operator\">:</span>f64 <span class=\"token operator\">=</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> t_r<span class=\"token operator\">:</span>f64 <span class=\"token operator\">=</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> t_i<span class=\"token operator\">:</span>f64 <span class=\"token operator\">=</span> <span class=\"token number\">0.</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> z_r<span class=\"token operator\">*</span>z_r <span class=\"token operator\">+</span> z_i<span class=\"token operator\">*</span>z_i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tt_r <span class=\"token operator\">=</span> z_r<span class=\"token operator\">*</span>z_r <span class=\"token operator\">-</span> z_i<span class=\"token operator\">*</span>z_i <span class=\"token operator\">+</span> c_r<span class=\"token punctuation\">;</span>\n\t\tt_i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>z_i<span class=\"token operator\">*</span>z_r <span class=\"token operator\">+</span> c_i<span class=\"token punctuation\">;</span>\n\t\tz_r <span class=\"token operator\">=</span> t_r<span class=\"token punctuation\">;</span>\n\t\tz_i <span class=\"token operator\">=</span> t_i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token constant\">ITER_CONST</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/*\nstores array of i16s at start of memory\ncorresponding to escape count at pixels in\narray\n*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> memcounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">const</span> step_X<span class=\"token operator\">:</span>f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">/</span><span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> step_Y<span class=\"token operator\">:</span>f32 <span class=\"token operator\">=</span> <span class=\"token constant\">WINDOW</span><span class=\"token operator\">/</span><span class=\"token function\">f32</span><span class=\"token punctuation\">(</span>canvas_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token constant\">START_Y_TOTAL</span><span class=\"token punctuation\">,</span> count_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_y <span class=\"token operator\">&lt;</span> canvas_height<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> step_Y<span class=\"token punctuation\">,</span> count_y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constant\">START_X_TOTAL</span><span class=\"token punctuation\">,</span> count_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count_x <span class=\"token operator\">&lt;</span> canvas_width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> step_X<span class=\"token punctuation\">,</span> count_x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tstore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i16</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(memcounter, mandelbrot(x,y));\n\t\t\tmemcounter += 2\n\t\t&#125;\n\t&#125;\n&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p><em>note that the store instruction there might look like it would cause issues, but as long as threads work on different parts of the image, that should not be a problem.</em></p>\n<h3>SIMD</h3>\n<p>SIMD (Single Instruction Multiple Data) instructions are special instructions on the CPU that allow multiple additions, multiplications etc to be carried out in parallel on the same core)</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/c/ce/SIMD2.svg\" alt=\"SIMD Explaination\"></p>\n<p>By Vadikus - Own work, CC BY-SA 4.0, <a href=\"https://commons.wikimedia.org/w/index.php?curid=39715273\" rel=\"nofollow\">https://commons.wikimedia.org/w/index.php?curid=39715273</a></p>\n<p>They’re not in the webassembly spec as yet, but should be <a href=\"https://webassembly.github.io/simd/core/exec/instructions.html#simd-instructions\" rel=\"nofollow\">soon</a>, and are currently available on chrome and firefox (although not on ARM in firefox 89, ie. apple M1.) Assemblyscript does not autovectorize code, but <a href=\"https://www.assemblyscript.org/stdlib/builtins.html#simd-%F0%9F%A6%84\" rel=\"nofollow\">allows</a> access to the instructions, and provides some sugar for different types and functions to initialise constant vectors.</p>\n<p>The vector size in the proposal is 128 bit, which is a decent compromise and is backed by hardware instructions on most modern computers. In the future, <a href=\"https://github.com/WebAssembly/flexible-vectors\" rel=\"nofollow\">flexible vectors</a>, should be able to allow access to 256, 512 bit vectors that modern intel and AMD CPUs support (consumer ARM chips currently only have 128 bit vectors, as far as I’m aware, although <a href=\"https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)\" rel=\"nofollow\">supercomputer ARM chips do have 512 bit vectors</a>.)</p>\n<p>Vectorizing the mandelbrot code above is not too bad, althought it does look rather messy:</p>\n<pre class=\"language-jsx\"><!-- HTML_TAG_START --><code class=\"language-jsx\">@inline\n<span class=\"token keyword\">function</span> <span class=\"token function\">mandelbrot_simd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c_rl<span class=\"token operator\">:</span>v128<span class=\"token punctuation\">,</span>c_il<span class=\"token operator\">:</span>v128</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>v128<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> in_set <span class=\"token operator\">:</span> v128 <span class=\"token operator\">=</span> <span class=\"token function\">i32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> z_r <span class=\"token operator\">:</span> v128 <span class=\"token operator\">=</span> <span class=\"token function\">f32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> z_i <span class=\"token operator\">:</span> v128 <span class=\"token operator\">=</span> <span class=\"token function\">f32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> t_r <span class=\"token operator\">:</span> v128 <span class=\"token operator\">=</span> <span class=\"token function\">f32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> t_i <span class=\"token operator\">:</span> v128 <span class=\"token operator\">=</span> <span class=\"token function\">f32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ones <span class=\"token operator\">=</span> <span class=\"token function\">i32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> fours <span class=\"token operator\">=</span> <span class=\"token function\">f32x4</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">ITER_CONSTS</span><span class=\"token operator\">:</span>v128 <span class=\"token operator\">=</span> v128<span class=\"token punctuation\">.</span>splat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(ITER_CONST);\n    let count:v128=i32x4(0,0,0,0)\n    for(\n        let total_count:i32 = 0, any_in_convergence_region:boolean = true;\n        any_in_convergence_region &amp;&amp;\n        total_count &lt; ITER_CONST;\n        total_count++;\n    ) </span><span class=\"token punctuation\">&#123;</span>\n        z_i <span class=\"token operator\">=</span> v128<span class=\"token punctuation\">.</span>add<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(c_il, v128.mul</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(v128.add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(z_r,z_r),z_i));\n        z_r = v128.add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(c_rl, v128.sub</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(t_r,t_i));\n        t_r = v128.mul</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(z_r,z_r);\n        t_i = v128.mul</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(z_i,z_i);\n        const mask = v128.le</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(v128.add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>f32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(t_r,t_i),fours);\n        any_in_convergence_region = v128.any_true(mask);\n        count = v128.add</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i32</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(count, v128.and(ones,mask));\n    &#125;\n    return count;\n&#125;</span></code><!-- HTML_TAG_END --></pre>\n<p>This should basically be a 4x speedup over the previous code, when run single threaded. Multithreaded, that number will vary depending on how threads are allocated, as work only gets completed as fast as the slowest thread.</p>\n<h3>Compiler Flags</h3>\n<p>For the examples above, some memory is reserved for the purposes of storing the image, in assemblyscript this is achieved by passing the <code>--memoryBase</code> flag to the <code>asc</code> compiler (as seen in the makefile below)</p>\n<p>The other flags are tuned for maximum performance (thanks to <a href=\"https://github.com/MaxGraey\" rel=\"nofollow\">Max Graey</a> for -O3 instead of -O3s/z) and to enable necessary features (threads, SIMD.)</p>\n<pre class=\"language-makefile\"><!-- HTML_TAG_START --><code class=\"language-makefile\">MEMORY_FLAGS <span class=\"token operator\">=</span> --maximumMemory 80 --importMemory --noExportMemory --initialMemory 80 --memoryBase 4000000\nOPTIMIZATION_FLAGS <span class=\"token operator\">=</span> -O3 --converge\nDEBUG_FLAGS <span class=\"token operator\">=</span> --sourceMap\nFEATURE_FLAGS <span class=\"token operator\">=</span> --enable simd --enable threads\nRUNTIME_FLAGS <span class=\"token operator\">=</span> --runtime stub\n<span class=\"token symbol\">start</span><span class=\"token punctuation\">:</span> install\n\tnpx asc assembly/mandel_final.ts -b build/mandel_final.wasm -t build/mandel_final.wat <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OPTIMIZATION_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>MEMORY_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>FEATURE_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>RUNTIME_FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DEBUG_FLAGS<span class=\"token punctuation\">)</span>\n\n<span class=\"token symbol\">install</span><span class=\"token punctuation\">:</span>\n\tnpm i</code><!-- HTML_TAG_END --></pre>\n<h3>Multithreaded SIMD Speed</h3>\n<p>Benchmark results will be discussed near the end of this article, but the speed of the multithreaded SIMD code is quite astonishing, roughly 3x the speed of multithreaded JS using sharedarraybuffers, and I’m guessing that’s held back by module message passing overheads. <a href=\"https://mandelbrot-ascript.vercel.app/\" rel=\"nofollow\">HERE</a> is a basic mandelbrot zoom implementation using it (only works in firefox(≥90 on apple m1) and chrome, <a href=\"https://github.com/pretentious7/mandelbrot-ascript\" rel=\"nofollow\">here’s</a> the github repo.) I’ll be working in boundary estimation and period checking along with xaos zoom algorithm into it in a couple of months, so stay tuned for that!</p>\n<p>I’m also fairly certain that this is the first(?) SIMD mandelbrot implementation for webassembly, so if anyone wants to use it for anything (under the terms of the GPLv3 License) feel free!</p>\n<p><em>[1] A page being 64KiB (65,536 bytes), so about 6.5 mb max memory</em></p></details>\n<br>\n<br>\n<h2>Results</h2>\n<p>First, we know that our benchmarks here are not rigorous in the slightest. Their purpose was to give us an idea of the rough performance capabilities of the tools we’re working with, to help inform our choices as we port certain programs (stay tuned!) to webassembly. We will be refining this tool in the future, and hope to have (somehow) bytecode outputs and flamegraphs on the site.</p>\n<table><thead><tr><th>Benchmark</th>\n<th>Firefox 89(ms)</th>\n<th>Chrome 91 (ms)</th></tr></thead>\n<tbody><tr><td>Naive-js</td>\n<td>2992</td>\n<td>631</td></tr>\n<tr><td>Improved-js</td>\n<td>1755</td>\n<td>292</td></tr>\n<tr><td>Multithreaded-js</td>\n<td>705</td>\n<td>129</td></tr>\n<tr><td>Singlethreaded-Rust * **</td>\n<td>296</td>\n<td>300</td></tr>\n<tr><td>Simple Assemblyscript</td>\n<td>494</td>\n<td>497</td></tr>\n<tr><td>Optimized non-SIMD AssemblyScript</td>\n<td>250</td>\n<td>262</td></tr>\n<tr><td>Optimized SIMD AssemblyScript</td>\n<td>124</td>\n<td>108</td></tr>\n<tr><td>SIMD Multithreaded AssemblyScript</td>\n<td>43</td>\n<td>43</td></tr></tbody></table>\n<p><em>All numbers approximate, gathered from fresh browser session after reboot on an HP Envy 13 with an i5-8265U CPU @ 1.60GHz and 8gb of RAM running Ubuntu 20.04.2 with kernel 5.8.0. Average of 5 runs (first 2 runs dropped)</em></p>\n<p>The results of our benchmark (at least approximately) line up with what one would expect, but we find a few items of interest. First, as far as the javascript implementations are concerned, Firefox is <em>significantly</em> slower than chrome. Second, webassembly speeds are comparable for both browsers.</p>\n<p>The performance advantage of webassembly (without SIMD) over javascript for this benchmark is basically negligible for chrome. In a future article it’ll be interesting to see whether the bytecode generated is also similar.</p>\n<p>But the key insight here is clear, webassembly offers <em>predictable</em> performance, across browser engines. We’ll be adding fallbacks for safari later to see if this holds there as well. Further, we’ll compare the results to native code.</p>\n<p>*<em>The rust code can likely be sped up with some optimizations here and there, but for a rough effort from a novice rust programmer, this is representative.</em></p>\n<p><em>** The rust code was improved by @MaxGraey and now lines up with what one would expect</em></p>\n<p>See the demo <a href=\"https://js-wasm-mandelbrot-benchmark-3.vercel.app/\" rel=\"nofollow\">here</a>.</p>\n<br>\n<h2>Final Thoughts</h2>\n<p>As tools of application distribution, browsers have some undeniable advantages over the traditional pipeline of download → extract onto disk → load from disk for execution. For most programs, it is technically unnecessary to have <em>all</em> of their assets present to be able to enjoy some subset of their capabilities. Of course, adding such partial update capabilities is non-trivial, and would add significant complexity. But web developers and browser vendors have made a lot of progress in enabling this essentially by default, and with webassembly, enabling it in areas where it’s not previously been feasible.</p>\n<p>Further, cloud offloading enables users to easily sustain state across devices and in some cases avoid calculation heavy code in the interests of battery life or smooth performance. The easiest way to realize these advantages is to distribute one’s application in an environment that does this <em>by default</em>: the browser. But a prerequisite for this is that the experience is not overly hampered by being in the browser, and bringing webassembly to near native performance is a key part of that.</p>\n<p>There is an opportunity here to allow people to access performance heavy applications like games and simulations on their devices without having to get into the nasty business of managing local state, which accounts for what, 99% of problems installing and using software? We want to help build this, and over the next few weeks, will be releasing demos to show what it might look like, so stay tuned!</p>\n<p><em>Of course, the possible bad end here is that the canvas ends up as an inefficient GUI toolkit to have fungible programmers at the cost of user experience, we hope that doesn’t happen.</em></p>\n<br>\n<h2>Further Reading:</h2>\n<p>David Beazley. (2019). A Talk Near the Future of Python (a.k.a., Dave live-codes a Webassembly Interpreter). <a href=\"https://www.youtube.com/watch?v=r-A78RgMhZU\" rel=\"nofollow\">https://www.youtube.com/watch?v=r-A78RgMhZU</a></p>\n<p>Firefox’s low-latency webassembly compiler – wingolog. (n.d.). Retrieved June 19, 2021, from <a href=\"https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler\" rel=\"nofollow\">https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler</a></p>\n<p>firefox’s low-latency webassembly compiler—Wingolog. (n.d.). Retrieved June 19, 2021, from <a href=\"https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler\" rel=\"nofollow\">https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler</a></p>\n<p>Pereira, F. M. Q., &amp; Palsberg, J. (2006). Register Allocation After Classical SSA Elimination is NP-Complete. In L. Aceto &amp; A. Ingólfsdóttir (Eds.), Foundations of Software Science and Computation Structures (Vol. 3921, pp. 79–93). Springer Berlin Heidelberg. <a href=\"https://doi.org/10.1007/11690634_6\" rel=\"nofollow\">https://doi.org/10.1007/11690634_6</a></p>\n<p>WebAssembly. (n.d.). Retrieved June 19, 2021, from <a href=\"https://webassembly.org/\" rel=\"nofollow\">https://webassembly.org/</a></p>\n<p>WebAssembly compilation pipeline · V8. (n.d.). Retrieved June 19, 2021, from <a href=\"https://v8.dev/docs/wasm-compilation-pipeline\" rel=\"nofollow\">https://v8.dev/docs/wasm-compilation-pipeline</a></p>\n<p><em>Ojasvin Kirpane, Abhishek Cherath, Jo Gao &amp; Abhinuv Allu</em></p>","css":{"code":"","map":null},"head":"<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\" data-svelte=\"svelte-r30au3\"><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\" data-svelte=\"svelte-r30au3\">","readingTime":"41 min read"}]}