import{S as Bk,i as Fk,s as Jk,e as t,j as r,a0 as Tf,k as Fm,a1 as xf,c as e,d as s,l as c,a2 as Sf,b as h,E as a,f as i,F as Ye,a3 as Af,t as o,v as Jm,a as l,g as p,w as Ym,_ as Ue,D as Wt,x as Um,p as Xm,n as qm,A as Vm}from"./vendor-2345f34e.js";function If(V){let g,T,j,A;return{c(){g=t("link"),T=r(),j=new Tf,A=Fm(),this.h()},l(v){const C=xf('[data-svelte="svelte-r30au3"]',document.head);g=e(C,"LINK",{rel:!0,href:!0,integrity:!0,crossorigin:!0}),C.forEach(s),T=c(v),j=Sf(v),A=Fm(),this.h()},h(){h(g,"rel","stylesheet"),h(g,"href","https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"),h(g,"integrity","sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"),h(g,"crossorigin","anonymous"),j.a=A},m(v,C){a(document.head,g),i(v,T,C),j.m(V[0],v,C),i(v,A,C)},p(v,[C]){C&1&&j.p(v[0])},i:Ye,o:Ye,d(v){s(g),v&&s(T),v&&s(A),v&&j.d()}}}function Rf(V,g,T){let j,{math:A}=g,{displayMode:v=!1}=g;const C={displayMode:v,throwOnError:!1};return V.$$set=O=>{"math"in O&&T(1,A=O.math),"displayMode"in O&&T(2,v=O.displayMode)},V.$$.update=()=>{V.$$.dirty&2&&T(0,j=Af.renderToString(A,C))},[j,A,v]}class $m extends Bk{constructor(g){super();Fk(this,g,Rf,If,Jk,{math:1,displayMode:2})}}function Mf(V){let g,T,j,A,v,C,O,F,kn,z,hn,dn,$,Pa,mn,ss,G,fn,K,Da,wn,ns,I,bn,N,yn,ca,Ps,ia,ua,Z,ka,Ds,J,vn,ha,Os,Oa,da,La,Ls,ma,U,Q,Wa,ja,ts,Ws,X,js,aa,_n,zs,H,Xe=`<code class="language-jsx"><span class="token keyword">const</span> <span class="token constant">START_X_TOTAL</span><span class="token operator">:</span> f32 <span class="token operator">=</span> <span class="token number">0.300283</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">START_Y_TOTAL</span><span class="token operator">:</span> f32 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.48857</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">WINDOW</span><span class="token operator">:</span> f32 <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> step_X<span class="token operator">:</span> f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span> <span class="token operator">/</span> <span class="token function">f32</span><span class="token punctuation">(</span>canvas_width<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> step_Y<span class="token operator">:</span> f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span> <span class="token operator">/</span> <span class="token function">f32</span><span class="token punctuation">(</span>canvas_height<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">ITER_CONST</span><span class="token operator">:</span> i32 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></code>`,es,B,os,fa,Gs,wa,jt='<code class="language-jsx"><span class="token keyword">const</span> <span class="token constant">N_THREADS</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code>',ba,sa,Ns,P,gn,ps,Hs,na,ls,ya,En,va,Bs,za,Fs,ta,x,Ga,ea,Tn,_a,xn,Sn,Na,L,An,ga,In,Rn,Ea,Mn,Cn,Ta,Pn,Dn,Ha,Ba,Js,rs,R,Ys,Fa,xa,On,Sa,Ln,Us,w,cs,Wn,is,us,jn,Xs,oa,Ja,zn,Aa,qs=`<code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">real<span class="token punctuation">,</span> imag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//Function that add this complex number with another complex number, cplx</span>
	<span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">cplx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">+=</span> cplx<span class="token punctuation">.</span>real<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">+=</span> cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//Fuction that returns the magnitude of this complex number</span>
	<span class="token function">mag</span><span class="token punctuation">(</span><span class="token parameter">cplx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//Function that multiplies this complex number with another complex number, cplx</span>
	<span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">cplx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> real_part <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">*</span> cplx<span class="token punctuation">.</span>real <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">*</span> cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">const</span> imag_part <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">*</span> cplx<span class="token punctuation">.</span>real <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">*</span> cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real_part<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag_part<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Gn,Ya,Ua,Nn,Ia,Vs=`<code class="language-jsx"><span class="token keyword">function</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span><span class="token parameter">cplx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">mag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token constant">ITER_CONST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		z <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cplx<span class="token punctuation">)</span><span class="token punctuation">;</span>
		count<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Xa,ks,$s,qa,Va,pa,$a,Ra,Ks,u,f,la,zt,Gt,hs,Nt=`<code class="language-jsx"><span class="token comment">//This is in the main function which calls the workers to do the work</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>workerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"worker.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">INDEXES_PER_WORKER</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">X_LEN</span><span class="token operator">*</span><span class="token constant">Y_LEN</span><span class="token punctuation">)</span><span class="token operator">/</span>workerCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">N_ROWS_PER_THREAD</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token constant">X_LEN</span><span class="token operator">/</span>workerCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">START_XC</span> <span class="token operator">=</span> <span class="token constant">N_ROWS_PER_THREAD</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token constant">START_INDEX</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token constant">INDEXES_PER_WORKER</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token constant">END_INDEX</span><span class="token operator">=</span> <span class="token constant">START_INDEX</span> <span class="token operator">+</span> <span class="token constant">INDEXES_PER_WORKER</span><span class="token punctuation">;</span>

  worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">COMPUTED_ROWS</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    points_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token constant">COMPUTED_ROWS</span><span class="token punctuation">;</span>
     doneCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>doneCount <span class="token operator">==</span> workerCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      points_array <span class="token operator">=</span> points_array<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token function">draw</span><span class="token punctuation">(</span>points_array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span></code>`,Ht,Ma,Ip=`<code class="language-jsx"><span class="token comment">//This is how it looks now in the worker function</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">START_XC</span><span class="token punctuation">,</span> <span class="token constant">STEP_X</span><span class="token punctuation">,</span> <span class="token constant">STEP_Y</span><span class="token punctuation">,</span> <span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">,</span> <span class="token constant">Y_LEN</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token keyword">const</span> points_in_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">Y_LEN</span> <span class="token operator">*</span> <span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>
		<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">+</span> <span class="token constant">START_XC</span> <span class="token operator">*</span> <span class="token constant">STEP_X</span><span class="token punctuation">,</span> count_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		count_x <span class="token operator">&lt;</span> <span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">;</span>
		x <span class="token operator">+=</span> <span class="token constant">STEP_X</span><span class="token punctuation">,</span> count_x<span class="token operator">++</span>
	<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> count_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_y <span class="token operator">&lt;</span> <span class="token constant">Y_LEN</span><span class="token punctuation">;</span> y <span class="token operator">+=</span> <span class="token constant">STEP_Y</span><span class="token punctuation">,</span> count_y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			points_in_thread<span class="token punctuation">[</span>count_x <span class="token operator">*</span> <span class="token constant">Y_LEN</span> <span class="token operator">+</span> count_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">postMessage</span><span class="token punctuation">(</span>points_in_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Bt,Ka,Ft,Jt,Zs,Yt,Ut,Qs,ds,Xt,ms,qt=`<code class="language-jsx"><span class="token comment">//This is in the main function which calls the workers to do the work</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"benchmarks/multithreaded-js/sharedworker.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>

    worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"worker finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">returnSharedBufferjs</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span> <span class="token constant">START_Y_TOTAL</span><span class="token punctuation">,</span> <span class="token constant">CANVAS_WIDTH</span><span class="token punctuation">,</span> <span class="token constant">CANVAS_HEIGHT</span><span class="token punctuation">,</span> <span class="token constant">WINDOW</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token constant">X_LEN</span> <span class="token operator">=</span> <span class="token constant">CANVAS_WIDTH</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">Y_LEN</span> <span class="token operator">=</span> <span class="token constant">CANVAS_HEIGHT</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token constant">WINDOW</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">STEP_X</span> <span class="token operator">=</span> window<span class="token operator">/</span><span class="token constant">X_LEN</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">STEP_Y</span> <span class="token operator">=</span> window<span class="token operator">/</span><span class="token constant">Y_LEN</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> workerCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sharedBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedArrayBuffer</span><span class="token punctuation">(</span><span class="token constant">X_LEN</span><span class="token operator">*</span><span class="token constant">Y_LEN</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sharedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8ClampedArray</span><span class="token punctuation">(</span>sharedBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sharedArray<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token constant">N_ROWS_PER_THREAD</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token constant">X_LEN</span><span class="token operator">/</span>workerCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token constant">START_YC</span> <span class="token operator">=</span> <span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span><span class="token constant">START_Y_TOTAL</span><span class="token punctuation">,</span> <span class="token constant">START_YC</span><span class="token punctuation">,</span> <span class="token constant">STEP_X</span><span class="token punctuation">,</span> <span class="token constant">STEP_Y</span><span class="token punctuation">,</span> <span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">,</span> <span class="token constant">X_LEN</span><span class="token punctuation">,</span> sharedArray<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>workerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    parameters<span class="token punctuation">.</span><span class="token constant">START_YC</span> <span class="token operator">=</span> <span class="token constant">N_ROWS_PER_THREAD</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>

    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createWorker</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,Vt,fs,Za=`<code class="language-jsx"><span class="token comment">//This is how it looks now in the worker function</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
		<span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span>
		<span class="token constant">START_Y_TOTAL</span><span class="token punctuation">,</span>
		<span class="token constant">START_YC</span><span class="token punctuation">,</span>
		<span class="token constant">STEP_X</span><span class="token punctuation">,</span>
		<span class="token constant">STEP_Y</span><span class="token punctuation">,</span>
		<span class="token constant">N_ROWS_PER_THREAD</span><span class="token punctuation">,</span>
		<span class="token constant">X_LEN</span><span class="token punctuation">,</span>
		sharedArray
	<span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>
		<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token constant">START_Y_TOTAL</span> <span class="token operator">+</span> <span class="token constant">START_YC</span> <span class="token operator">*</span> <span class="token constant">STEP_Y</span><span class="token punctuation">,</span> count_y <span class="token operator">=</span> <span class="token constant">START_YC</span><span class="token punctuation">;</span>
		count_y <span class="token operator">&lt;</span> <span class="token constant">N_ROWS_PER_THREAD</span> <span class="token operator">+</span> <span class="token constant">START_YC</span><span class="token punctuation">;</span>
		y <span class="token operator">+=</span> <span class="token constant">STEP_Y</span><span class="token punctuation">,</span> count_y<span class="token operator">++</span>
	<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span> count_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_x <span class="token operator">&lt;</span> <span class="token constant">X_LEN</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token constant">STEP_X</span><span class="token punctuation">,</span> count_x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>count_x <span class="token operator">+</span> count_y <span class="token operator">*</span> <span class="token constant">X_LEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			val <span class="token operator">=</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			sharedArray<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
			sharedArray<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
			sharedArray<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
			sharedArray<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,$t,Qa,Kt,ws,an,Zt,q,Hn,Bn,Fn,Jn,D,Qt,sn,ae,Yn,E,nn,se,ne,ra,te,as,ee,Jl,Un,Yl,Ul,Xl,qe,ql,Vl,Xn,$l,Ve,Kl,Zl,Ql,qn,ar,Vn,sr,nr,tr,$n,er,$e,or,pr,lr,Ke,rr,cr,Ze,ir,ur,Qe,ao,kr,hr,Kn,Zn,dr,so,mr,fr,wr,no,br,Rp,Mp,Cp,Pp,oe,pe,to,yr,vr,Dp,Op,Lp,Wp,Qn,_r,eo,gr,jp,b,oo,Er,Tr,po,xr,Sr,at,Ar,st,Ir,Rr,Mr,Ca,Cr,lo,Pr,Dr,ro,Or,Lr,co,Wr,jr,zr,le,Qm=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">in_mandelbrot</span><span class="token punctuation">(</span>cplx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Complex</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u8</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">ITER_CONST</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> z <span class="token operator">=</span> <span class="token function">build_complex</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> z<span class="token punctuation">.</span><span class="token function">mag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2.0</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token constant">ITER_CONST</span> <span class="token punctuation">&#123;</span>
        z <span class="token operator">=</span> <span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cplx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// z = z^2 + cplx</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">255</span> <span class="token punctuation">&#123;</span>
        count <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    count <span class="token keyword">as</span> <span class="token keyword">u8</span>
<span class="token punctuation">&#125;</span></code>`,Gr,io,Nr,Hr,re,af=`<code class="language-rust"><span class="token attribute attr-name">#[wasm_bindgen]</span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">pub</span> <span class="token keyword">type</span> <span class="token class-name">ImageData</span><span class="token punctuation">;</span>

    <span class="token attribute attr-name">#[wasm_bindgen(constructor, catch)]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Uint8ClampedArray</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">ImageData</span><span class="token punctuation">,</span> <span class="token class-name">JsValue</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token attribute attr-name">#[wasm_bindgen]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span>start_x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> start_y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> window<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ImageData</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">let</span> y_len<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> height <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> x_len<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> width <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> pixels<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_len <span class="token operator">*</span> y_len<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> points_array <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> pixels<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">fill_mandelbrot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> points_array<span class="token punctuation">,</span> start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> y_len<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> pointer <span class="token operator">=</span> points_array<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> mem <span class="token operator">=</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span></span><span class="token function">memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unchecked_into</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">WebAssembly</span><span class="token punctuation">::</span><span class="token class-name">Memory</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> new_array <span class="token operator">=</span> <span class="token class-name">Uint8ClampedArray</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mem<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>pointer <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pointer <span class="token operator">+</span> pixels<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ImageData</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_array<span class="token punctuation">,</span> x_len<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_len<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Br,bs,Fr,nt,Jr,Yr,uo,Ur,Xr,qr,ko,Vr,$r,tt,Kr,ho,Zr,Qr,ac,mo,sc,nc,ce,sf=`<code class="language-bash"><span class="token function">sed</span> <span class="token string">'/importW/d;s/^export//g;/default/d'</span> pkg/Mandelbrot.js <span class="token operator">></span> tmp_mandel_import.js
<span class="token function">cat</span> tmp_mandel_import.js  mandel_src.js <span class="token operator">></span> Mandelbrot.js
<span class="token function">rm</span> tmp_mandel_import.js</code>`,tc,fo,ec,oc,wo,pc,lc,et,rc,ot,cc,ic,uc,tn,bo,kc,hc,yo,dc,mc,fc,vo,wc,zp,Gp,Np,Hp,Bp,pt,bc,_o,yc,Fp,d,go,vc,_c,Eo,gc,Ec,ie,nf=`<code class="language-jsx">declare <span class="token keyword">const</span> canvas_width<span class="token operator">:</span> i32<span class="token punctuation">;</span>
declare <span class="token keyword">const</span> canvas_height<span class="token operator">:</span> i32<span class="token punctuation">;</span>
declare <span class="token keyword">const</span> <span class="token constant">ITER_CONST</span><span class="token operator">:</span> i16<span class="token punctuation">;</span>
declare <span class="token keyword">const</span> <span class="token constant">START_X_TOTAL</span><span class="token operator">:</span>f32
declare <span class="token keyword">const</span> <span class="token constant">START_Y_TOTAL</span><span class="token operator">:</span>f32
declare <span class="token keyword">const</span> <span class="token constant">WINDOW</span><span class="token operator">:</span>f32

@unmanaged
<span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">&#123;</span>
	real<span class="token operator">:</span> f64 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	imag<span class="token operator">:</span> f64 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">real<span class="token operator">:</span>f64<span class="token punctuation">,</span> imag<span class="token operator">:</span>f64</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	@inline
	<span class="token function">add</span><span class="token punctuation">(</span>cplx<span class="token operator">:</span> Complex<span class="token punctuation">)</span><span class="token operator">:</span> Complex <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">+</span> cplx<span class="token punctuation">.</span>real<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">+</span> cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	@inline
	<span class="token function">mag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> f64 <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	@inline
	<span class="token function">mul</span><span class="token punctuation">(</span>cplx<span class="token operator">:</span> Complex<span class="token punctuation">)</span><span class="token operator">:</span> Complex <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> __tempr  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real<span class="token operator">*</span>cplx<span class="token punctuation">.</span>real <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token operator">*</span>cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">const</span> __tempi <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token operator">*</span>cplx<span class="token punctuation">.</span>real <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real<span class="token operator">*</span>cplx<span class="token punctuation">.</span>imag<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> __tempr<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> __tempi<span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">set</span><span class="token punctuation">(</span>real<span class="token operator">:</span>f64<span class="token punctuation">,</span>imag<span class="token operator">:</span>f64<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> z<span class="token operator">:</span>Complex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cplx<span class="token operator">:</span>Complex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

@inline
<span class="token keyword">function</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span><span class="token parameter">real<span class="token operator">:</span>f64<span class="token punctuation">,</span>imag<span class="token operator">:</span>f64</span><span class="token punctuation">)</span><span class="token operator">:</span>i16<span class="token punctuation">&#123;</span>
	z<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
	cplx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>real<span class="token punctuation">,</span>imag<span class="token punctuation">)</span>

	<span class="token keyword">let</span> count<span class="token operator">:</span>i16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> z<span class="token punctuation">.</span><span class="token function">mag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cplx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// z = z^2 + cplx</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token constant">ITER_CONST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
stores array of i16s at start of memory
corresponding to escape count at pixels in
array
*/</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> memcounter <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">const</span> step_X<span class="token operator">:</span>f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span><span class="token operator">/</span><span class="token function">f32</span><span class="token punctuation">(</span>canvas_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> step_Y<span class="token operator">:</span>f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span><span class="token operator">/</span><span class="token function">f32</span><span class="token punctuation">(</span>canvas_height<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token constant">START_Y_TOTAL</span><span class="token punctuation">,</span> count_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_y <span class="token operator">&lt;</span> canvas_height<span class="token punctuation">;</span> y <span class="token operator">+=</span> step_Y<span class="token punctuation">,</span> count_y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span> count_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_x <span class="token operator">&lt;</span> canvas_width<span class="token punctuation">;</span> x <span class="token operator">+=</span> step_X<span class="token punctuation">,</span> count_x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			store<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i16</span><span class="token punctuation">></span></span><span class="token plain-text">(memcounter, mandelbrot(x,y));
			memcounter += 2
		&#125;
	&#125;
&#125;</span></code>`,Tc,lt,xc,To,Sc,Ac,Ic,xo,Rc,Mc,rt,Cc,ct,Pc,Dc,Oc,ue,tf=`<code class="language-jsx">Cross<span class="token operator">-</span>Origin<span class="token operator">-</span>Opener<span class="token operator">-</span>Policy<span class="token operator">:</span> same<span class="token operator">-</span>origin
Cross<span class="token operator">-</span>Origin<span class="token operator">-</span>Embedder<span class="token operator">-</span>Policy<span class="token operator">:</span> require<span class="token operator">-</span>corp</code>`,Lc,So,Wc,jc,it,zc,ut,Gc,Nc,Hc,ke,kt,Yk,Bc,Ao,Fc,Jc,Io,Yc,Uc,he,ef=`<code class="language-jsx">@inline
<span class="token keyword">function</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span><span class="token parameter">c_r<span class="token operator">:</span>f64<span class="token punctuation">,</span> c_i<span class="token operator">:</span>f64</span><span class="token punctuation">)</span><span class="token operator">:</span>i16<span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> count<span class="token operator">:</span>i16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> z_r<span class="token operator">:</span>f64 <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">,</span> z_i<span class="token operator">:</span>f64 <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">,</span> t_r<span class="token operator">:</span>f64 <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">,</span> t_i<span class="token operator">:</span>f64 <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> z_r<span class="token operator">*</span>z_r <span class="token operator">+</span> z_i<span class="token operator">*</span>z_i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		t_r <span class="token operator">=</span> z_r<span class="token operator">*</span>z_r <span class="token operator">-</span> z_i<span class="token operator">*</span>z_i <span class="token operator">+</span> c_r<span class="token punctuation">;</span>
		t_i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>z_i<span class="token operator">*</span>z_r <span class="token operator">+</span> c_i<span class="token punctuation">;</span>
		z_r <span class="token operator">=</span> t_r<span class="token punctuation">;</span>
		z_i <span class="token operator">=</span> t_i<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token constant">ITER_CONST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
stores array of i16s at start of memory
corresponding to escape count at pixels in
array
*/</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> memcounter <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">const</span> step_X<span class="token operator">:</span>f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span><span class="token operator">/</span><span class="token function">f32</span><span class="token punctuation">(</span>canvas_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> step_Y<span class="token operator">:</span>f32 <span class="token operator">=</span> <span class="token constant">WINDOW</span><span class="token operator">/</span><span class="token function">f32</span><span class="token punctuation">(</span>canvas_height<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token constant">START_Y_TOTAL</span><span class="token punctuation">,</span> count_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_y <span class="token operator">&lt;</span> canvas_height<span class="token punctuation">;</span> y <span class="token operator">+=</span> step_Y<span class="token punctuation">,</span> count_y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token constant">START_X_TOTAL</span><span class="token punctuation">,</span> count_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count_x <span class="token operator">&lt;</span> canvas_width<span class="token punctuation">;</span> x <span class="token operator">+=</span> step_X<span class="token punctuation">,</span> count_x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			store<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i16</span><span class="token punctuation">></span></span><span class="token plain-text">(memcounter, mandelbrot(x,y));
			memcounter += 2
		&#125;
	&#125;
&#125;</span></code>`,Xc,Ro,Mo,qc,Vc,Co,$c,Kc,Po,Zc,Qc,Do,de,Uk,ai,me,si,ht,ni,ti,ys,ei,dt,oi,pi,mt,li,ri,ci,vs,ii,ft,ui,ki,wt,hi,di,mi,Oo,fi,wi,fe,of=`<code class="language-jsx">@inline
<span class="token keyword">function</span> <span class="token function">mandelbrot_simd</span><span class="token punctuation">(</span><span class="token parameter">c_rl<span class="token operator">:</span>v128<span class="token punctuation">,</span>c_il<span class="token operator">:</span>v128</span><span class="token punctuation">)</span><span class="token operator">:</span>v128<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> in_set <span class="token operator">:</span> v128 <span class="token operator">=</span> <span class="token function">i32x4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> z_r <span class="token operator">:</span> v128 <span class="token operator">=</span> <span class="token function">f32x4</span><span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> z_i <span class="token operator">:</span> v128 <span class="token operator">=</span> <span class="token function">f32x4</span><span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t_r <span class="token operator">:</span> v128 <span class="token operator">=</span> <span class="token function">f32x4</span><span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t_i <span class="token operator">:</span> v128 <span class="token operator">=</span> <span class="token function">f32x4</span><span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ones <span class="token operator">=</span> <span class="token function">i32x4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> fours <span class="token operator">=</span> <span class="token function">f32x4</span><span class="token punctuation">(</span><span class="token number">4.</span><span class="token punctuation">,</span><span class="token number">4.</span><span class="token punctuation">,</span><span class="token number">4.</span><span class="token punctuation">,</span><span class="token number">4.</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token constant">ITER_CONSTS</span><span class="token operator">:</span>v128 <span class="token operator">=</span> v128<span class="token punctuation">.</span>splat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i32</span><span class="token punctuation">></span></span><span class="token plain-text">(ITER_CONST);
    let count:v128=i32x4(0,0,0,0)
    for(
        let total_count:i32 = 0, any_in_convergence_region:boolean = true;
        any_in_convergence_region &amp;&amp;
        total_count &lt; ITER_CONST;
        total_count++;
    ) </span><span class="token punctuation">&#123;</span>
        z_i <span class="token operator">=</span> v128<span class="token punctuation">.</span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(c_il, v128.mul</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(v128.add</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(z_r,z_r),z_i));
        z_r = v128.add</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(c_rl, v128.sub</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(t_r,t_i));
        t_r = v128.mul</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(z_r,z_r);
        t_i = v128.mul</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(z_i,z_i);
        const mask = v128.le</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(v128.add</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>f32</span><span class="token punctuation">></span></span><span class="token plain-text">(t_r,t_i),fours);
        any_in_convergence_region = v128.any_true(mask);
        count = v128.add</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i32</span><span class="token punctuation">></span></span><span class="token plain-text">(count, v128.and(ones,mask));
    &#125;
    return count;
&#125;</span></code>`,bi,Lo,yi,vi,Wo,_i,gi,_s,Ei,jo,Ti,xi,zo,Si,Ai,Ii,bt,Ri,yt,Mi,Ci,Pi,we,pf=`<code class="language-makefile">MEMORY_FLAGS <span class="token operator">=</span> --maximumMemory 80 --importMemory --noExportMemory --initialMemory 80 --memoryBase 4000000
OPTIMIZATION_FLAGS <span class="token operator">=</span> -O3 --converge
DEBUG_FLAGS <span class="token operator">=</span> --sourceMap
FEATURE_FLAGS <span class="token operator">=</span> --enable simd --enable threads
RUNTIME_FLAGS <span class="token operator">=</span> --runtime stub
<span class="token symbol">start</span><span class="token punctuation">:</span> install
	npx asc assembly/mandel_final.ts -b build/mandel_final.wasm -t build/mandel_final.wat <span class="token variable">$</span><span class="token punctuation">(</span>OPTIMIZATION_FLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>MEMORY_FLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FEATURE_FLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>RUNTIME_FLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEBUG_FLAGS<span class="token punctuation">)</span>

<span class="token symbol">install</span><span class="token punctuation">:</span>
	npm i</code>`,Di,Go,Oi,Li,gs,Wi,vt,ji,zi,_t,Gi,Ni,Hi,No,Bi,Fi,Ho,Bo,Ji,Jp,Yp,Up,Xp,qp,be,Yi,Vp,ye,Ui,$p,en,Fo,Es,Jo,Xi,qi,Yo,Vi,$i,Uo,Ki,Zi,M,Ts,Xo,Qi,au,qo,su,nu,Vo,tu,eu,xs,$o,ou,pu,Ko,lu,ru,Zo,cu,iu,Ss,Qo,uu,ku,ap,hu,du,sp,mu,fu,As,np,wu,bu,tp,yu,vu,ep,_u,gu,Is,op,Eu,Tu,pp,xu,Su,lp,Au,Iu,Rs,rp,Ru,Mu,cp,Cu,Pu,ip,Du,Ou,Ms,up,Lu,Wu,kp,ju,zu,hp,Gu,Nu,Cs,dp,Hu,Bu,mp,Fu,Ju,fp,Yu,Kp,ve,wp,Uu,Zp,on,Xu,bp,qu,Vu,Qp,_e,$u,al,pn,Ku,yp,Zu,Qu,sl,gt,ak,vp,sk,nl,ge,_p,nk,tl,ln,tk,Et,ek,ok,el,ol,pl,Ee,pk,ll,rn,lk,gp,rk,ck,rl,cn,ik,Ep,uk,kk,cl,Te,hk,il,xe,Tp,dk,ul,kl,hl,Se,mk,dl,Tt,fk,xt,wk,ml,St,bk,At,yk,fl,It,vk,Rt,_k,wl,Mt,gk,Ct,Ek,bl,Pt,Tk,Dt,xk,yl,Ot,Sk,Lt,Ak,vl,Ae,xp,Ik,_l;return N=new $m({props:{math:Pf}}),ca=new $m({props:{math:Cf}}),{c(){g=t("div"),T=t("img"),A=r(),v=t("h2"),C=o("Introduction"),O=r(),F=t("p"),kn=o("Hey, welcome to the Feather Systems blog. This is the first post of many, documenting our journey towards creating simpler systems for better performance on the web. This post will document our initial experiments rendering the Mandelbrot set with JavaScript, Web-workers & emerging web technologies like webassembly. You can access the project "),z=t("a"),hn=o("here"),dn=o(" and view the code "),$=t("a"),Pa=o("here"),mn=o(". These experiments were tested and measured by the team to properly document each technology\u2019s advantages & disadvantages."),ss=r(),G=t("p"),fn=o("To elucidate, let\u2019s start with fractals & the mandelbrot set:"),K=r(),Da=t("h2"),wn=o("The Mandelbrot Set"),ns=r(),I=t("p"),bn=o("The Mandelbrot Set is defined as the set of complex numbers for which the function "),Jm(N.$$.fragment),yn=o(" does not diverge when "),Jm(ca.$$.fragment),Ps=o(". An image of how the Mandelbrot set looks as follows. Points shaded black are in the set. We are using the Mandelbrot set to benchmark our code."),ia=r(),ua=t("div"),Z=t("img"),Ds=r(),J=t("p"),vn=o("The Mandelbrot Set is stunning. We highly recommend getting lost in its beauty using our rendering website ("),ha=t("a"),Os=o("https://mandelbrot-ascript.vercel.app/"),Oa=o("). Click to zoom and Shift + Click to zoom out."),da=r(),La=t("h2"),Ls=o("Benchmark Structure"),ma=r(),U=t("p"),Q=t("a"),Wa=o("The benchmarking site"),ja=o(" is designed to display each iteration we developed with a rough estimate for performance measured in milliseconds. For each version, a function was written to perform the Mandelbrot calculations and return a JavaScript ImageData object that could be easily put on the Canvas. Once the user selects a version from the drop down menu, the corresponding function is called. Since the functions can take some time to complete, they are called from a Web-worker to prevent the main thread from freezing while the function runs. The performance is calculated using "),ts=t("code"),Ws=o("performance.now()"),X=o(" calls before and after the function call that returns the ImageData object."),js=r(),aa=t("p"),_n=o("Across all iterations, I used the following values:"),zs=r(),H=t("pre"),es=r(),B=t("p"),os=t("strong"),fa=o("FOR MULTITHREADED"),Gs=r(),wa=t("pre"),ba=r(),sa=t("p"),Ns=o("We assume that the canvas width and height are integers. To determine if a point was in the Mandelbrot set, we iterated the Mandelbrot function on the point up to "),P=t("code"),gn=o("ITER_CONST"),ps=o(", returning the number of times the function had iterated. We use the returned Mandelbrot value to set the color."),Hs=r(),na=t("p"),ls=o("You may notice that RGB values get clamped at 255, making it seem like the exercise of iterating all the way to 1000 is just for the sake of testing performance, which it is. (Here is a whole list of "),ya=t("a"),En=o("smarter and better coloring algorithms"),va=o(" that we will not be using in this benchmarking exercise.)"),Bs=r(),za=t("p"),Fs=o("As of when this article was published, the following versions are available on the Benchmarking Site:"),ta=r(),x=t("ul"),Ga=t("li"),ea=o("Naive JS single threaded"),Tn=r(),_a=t("li"),xn=o("Rust WASM using bindgen (single threaded)"),Sn=r(),Na=t("li"),L=o("Assemblyscript old version (single threaded, not thread safe)"),An=r(),ga=t("li"),In=o("Assemblyscript new version (single threaded, thread safe)"),Rn=r(),Ea=t("li"),Mn=o("Assemblyscript SIMD WASM (singlethreaded, multithreaded)"),Cn=r(),Ta=t("li"),Pn=o("New JS(less memory allocation) singlethreaded"),Dn=r(),Ha=t("li"),Ba=o("New JS SharedMemoryBuffer multithreaded"),Js=r(),rs=t("br"),R=r(),Ys=t("br"),Fa=r(),xa=t("h2"),On=o("Implementing the Mandelbrot Set in JavaScript "),Sa=t("em"),Ln=o("by Abhinuv Allu"),Us=r(),w=t("details"),cs=t("summary"),Wn=o("Click to Read"),is=r(),us=t("p"),jn=o("I began the testing process with the web\u2019s best frenemy, Javascipt."),Xs=r(),oa=t("p"),Ja=o("I started with a naive approach to implement the Mandelbrot set in JavaScript and then try and optimize later. I started by creating a class for Complex numbers. This class would be able to add, multiply and return the magnitude. For the magnitude, I used a library function Math.hypot. Down below is our first initial implementation of the Complex class."),zn=r(),Aa=t("pre"),Gn=r(),Ya=t("p"),Ua=o("The program iterated through each element of the canvas to compute whether or not they were in the Mandelbrot set."),Nn=r(),Ia=t("pre"),Xa=r(),ks=t("p"),$s=o("These data points were added to an array which is then painted onto the Canvas. I had some ideas about optimizations with help from the profiler, however the most fascinating insight was that the Math.hypot function for two numbers is an order of magnitude slower than squaring, adding, and then computing the square root. During the profiling of the initial code I found out that Math.hypot was taking up most of the time."),qa=r(),Va=t("div"),pa=t("img"),Ra=r(),Ks=t("h3"),u=o("Improved JavaScript"),f=r(),la=t("p"),zt=o("To improve the initial naive approach, I decided to add multithreading. I started this with a naive way of having the worker compute each point and then send it back to receive the next point but, the message overhead was immense and resulted in a single threaded function as I only had one worker. The next step was experimenting with divisibility classes to add multiple workers. But this had the same problem where the overhead of sending & receiving a message from the workers was just too much. Eventually, I figured out that I would have each worker compute a set number of rows at a time."),Gt=r(),hs=t("pre"),Ht=r(),Ma=t("pre"),Bt=r(),Ka=t("h3"),Ft=o("Shared Buffer"),Jt=r(),Zs=t("p"),Yt=o("Since all the points would be added to the same array it would make sense that having a shared buffer to reduce the overhead needed to send array points would decrease the compute time. So I added a shared buffer that was formatted like an ImageData object so it would be easier to paint it onto the canvas. This required some rewriting of the some steps here and there, but it ended up being faster."),Ut=r(),Qs=t("p"),ds=o("The other issue with using a Shared Buffer is that I had to add promises to the code, so werefactored it to include promises."),Xt=r(),ms=t("pre"),Vt=r(),fs=t("pre"),$t=r(),Qa=t("p"),Kt=o("These changes made the code perform a lot better. You can check out it\u2019s performance in the \u201D"),ws=t("a"),an=o("Results"),Zt=o("\u201D section. JavaScript was extremely performant (especially on Chrome) and gave us hope that pushing the boundaries of speed on the web was possible."),q=r(),Hn=t("br"),Bn=r(),Fn=t("br"),Jn=r(),D=t("h2"),Qt=o("So, What is Webassembly? "),sn=t("em"),ae=o("by Abhishek Cherath"),Yn=r(),E=t("details"),nn=t("summary"),se=o("Click to Read"),ne=r(),ra=t("p"),te=o(`In our quest to further optimize performance, we used webassembly, an emerging web technology optimized for what we are trying to achieve. So, what is it?
Insofar as an overview is concerned, nothing beats Lin Clark\u2019s cartoon intro `),as=t("a"),ee=o("here"),Jl=o(", and the MDN docs "),Un=t("a"),Yl=o("here"),Ul=o(". Put simply, webassembly is a low level typed language that targets the browser\u2019s VM. For some reasons[1] , it\u2019s very quick and easy to compile into decently fast machine code."),Xl=r(),qe=t("p"),ql=o("Fundamentally, the language was designed to offer the best possible latency (time to execution) and speed of execution. Low latency is achieved by having a small binary representation (vs javascript\u2019s textual representation) and having type definitions and a function table at the start of a .wasm module, which allows compilers to compile in a streaming fashion, instead of needing to have access to the entire file before starting."),Vl=r(),Xn=t("p"),$l=o("Speed of execution requires slow compilation with multiple passes for the compiler to accurately assess the best register allocation, optimize out unnecessary instructions and do whatever other things compilers do. ("),Ve=t("em"),Kl=o("note: I have frankly no idea what goes into compiler optimization, I just know it takes time"),Zl=o(")"),Ql=r(),qn=t("p"),ar=o("To satisfy both these goals, browsers (atleast Firefox and Chrome) have two compilers for webassembly, the first compiles the module as it\u2019s called from the network, and is basically instant ("),Vn=t("a"),sr=o("here"),nr=o(", chrome devs claim that theirs can do on the order of 10+ mb of code per second, so the bottleneck will almost always be the speed of the network rather than the compiler.) The second does optimization and dynamically replaces the unoptimized bytecode from the first when it\u2019s done."),tr=r(),$n=t("p"),er=o("It\u2019s interesting to note here that, "),$e=t("em"),or=o("a priori"),pr=o(" there\u2019s no reason to expect that webassembly code for high performance stuff [2] (like fractal calculation) will be any faster than its javascript counterpart. Since the hot loop (calculating escape time) is running many thousands of times, one would expect the javascript JIT compiler to infer the output types and get basically similar bytecode, while amortizing its greater overhead considering workload size."),lr=r(),Ke=t("p"),rr=o("In a later article, I will be examining this conjecture, and taking a deeper look at the flamegraphs and bytecode generated by our benchmarks."),cr=r(),Ze=t("p"),ir=o("The other interesting thing about webassembly is its memory model, programs do not have access to their own instructions and stack machine memory (so no self modifying code, and no messing with values on the stack). What they do have access to is a block of linear memory, which is backed by a javascript ArrayBuffer, and byte addressed (ie. memory[0] is 1 byte long.)"),ur=r(),Qe=t("p"),ao=t("em"),kr=o("[1]I\u2019m not entirely sure why, but it\u2019s some combination of coding for a simple stack machine, having type information, linear memory, and being easy to parse."),hr=r(),Kn=t("p"),Zn=t("em"),dr=o("[2]This is "),so=t("strong"),mr=o("mostly"),fr=o(" true, except for vectorization. SIMD (Single Instruction Multiple Data) instructions are featured in the webassembly spec and implemented by chrome and firefox, which do not expose them in js, and have no plans to do so. (although"),wr=o(" I "),no=t("em"),br=o("suppose there\u2019s nothing stopping a JIT from autovectorizing, is there?)"),Rp=r(),Mp=t("br"),Cp=t("br"),Pp=r(),oe=t("blockquote"),pe=t("p"),to=t("strong"),yr=o("Our Approach to webassembly"),vr=o(": As many languages can be compiled to webassembly, we looked at two of the most commonly used ones: Rust & AssemblyScript. In the following sections we will describe our approach to these two languages."),Dp=r(),Op=t("br"),Lp=t("br"),Wp=r(),Qn=t("h2"),_r=o("Rust Implementation "),eo=t("em"),gr=o("by Jo Gao"),jp=r(),b=t("details"),oo=t("summary"),Er=o("Click to Read"),Tr=r(),po=t("h3"),xr=o("Singlethreaded"),Sr=r(),at=t("p"),Ar=o("I wrote a similar implementation of the function in Rust that would return an ImageData object of the Mandelbrot Set. It uses "),st=t("a"),Ir=o("wasm-bindgen"),Rr=o(", a Rust library that will compile Rust code to webassembly, and then generate the bindings and glue between JavaScript and webassembly so that it can be run on the web. It handles all the type conversions between JavaScript and webassembly and facilitates the compilation of Rust to webassembly."),Mr=r(),Ca=t("p"),Cr=o("In the iterative "),lo=t("code"),Pr=o("in_mandelbrot"),Dr=o(" function, "),ro=t("code"),Or=o("count"),Lr=o(" is set to iterate all the way to 1000 for benchmarking purposes. When returning, "),co=t("code"),Wr=o("count"),jr=o(" is set to 255 if larger than 255 to prevent having to cast numbers larger than 255 to u8."),zr=r(),le=t("pre"),Gr=r(),io=t("p"),Nr=o("The magic of wasm-bindgen kicks in here, allowing us to create the ImageData object right in the Rust code by providing the type and the constructor signature:"),Hr=r(),re=t("pre"),Br=r(),bs=t("p"),Fr=o("After compiling this code, wasm-bindgen outputs a number of files that are meant to be bundled using "),nt=t("a"),Jr=o("Webpack"),Yr=o(" and imported to your JavaScript file as an ES6 module, allowing access to the functions that were written in Rust. The idea is that after compiling and importing the module, calling "),uo=t("code"),Ur=o("run(...)"),Xr=o("would return a whole JavaScript ImageData Object."),qr=r(),ko=t("p"),Vr=o("Unfortunately, our Benchmarking Site is structured to use a web worker to call this function. Modules cannot be imported to web workers. However, they can be imported to module workers, web workers that support module import, but as of today, Firefox does not support this feature."),$r=r(),tt=t("p"),Kr=o("This is an infeasible solution because I was unwilling to limit the availability of our benchmark site for this implementation. After many hours of tinkering with the existing setup, I found a workaround that eliminated the need for Webpack altogether: after compiling with wasm-bindgen, I copy and pasted the entire outputted .js file with the import and exports removed, appended the wrapper function I had written to it, and called "),ho=t("code"),Zr=o("init(...)"),Qr=o(" on the outputted .wasm."),ac=r(),mo=t("p"),sc=o("After confirming that this worked, A colleague and I wrote a shell script to automatically do this after compilation. Albeit a little unpleasant on the eyes, it does the job:"),nc=r(),ce=t("pre"),tc=r(),fo=t("h3"),ec=o("Rust & Webassembly Multi-Threaded"),oc=r(),wo=t("p"),pc=o("To further improve performance in Rust, I carried out the same calculations, but in parallel this time. An advantage of the Mandelbrot Set is that determining whether a pixel falls within the set or not can be done completely independently of other pixels. The outcome of each pixel has no effect on the others, making the transition to multithreading straightforward."),lc=r(),et=t("p"),rc=o("I used the "),ot=t("a"),cc=o("Parallel Raytracing example"),ic=o(". given in the Wasm-Bindgen repo, as a starting point. Using a combination of web workers and the Rayon Crate for data parallelism in Rust yielded a pretty fast multithreaded Mandelbrot Set."),uc=r(),tn=t("p"),bo=t("em"),kc=o("Unfortunately,"),hc=o(" I "),yo=t("em"),dc=o("was unable to include this version of the Mandelbrot in the final Benchmarking website"),mc=o(" because I ran into a similar problem with the wasm-bindgen and module output. This time, it was further complicated by the Webworkers being created from within the Rust code. The funky workaround that had allowed for the singlethreaded RustWasm example to run on the Benchmarking Site failed to work the same magic for this implementation."),fc=r(),vo=t("p"),wc=o("This version of the Mandelbrot also makes use of the SharedArrayBuffer, and had it been on the site, would not work in Safari and browsers that do not support SharedArrayBuffer Objects."),zp=r(),Gp=t("br"),Np=r(),Hp=t("br"),Bp=r(),pt=t("h2"),bc=o("AssemblyScript "),_o=t("em"),yc=o("by Abhishek Cherath"),Fp=r(),d=t("details"),go=t("summary"),vc=o("Click to Read"),_c=r(),Eo=t("p"),gc=o("AssemblyScript compiles a subset of typescript to webassembly. To get an idea of how simple it is to write it, here\u2019s essentially the same javascript code from earlier, with type annotations and minor changes for webassembly:"),Ec=r(),ie=t("pre"),Tc=r(),lt=t("p"),xc=o("The only really noteworthy change was to not have "),To=t("code"),Sc=o("new"),Ac=o(" in the hot loop. The Assemblyscript garbage collector had some trouble with it and total allocation would exceed webassembly\u2019s 100 page memory limit[1]. I suspect that sort of code will be usable once the webassembly GC proposals, which allow wasm modules to hook into the browser\u2019s GC, are implemented."),Ic=r(),xo=t("h3"),Rc=o("Threading"),Mc=r(),rt=t("p"),Cc=o("The fastest way to thread code in browsers is to use "),ct=t("a"),Pc=o("SharedArrayBuffer"),Dc=o(", this also requires the following CORS headers."),Oc=r(),ue=t("pre"),Lc=r(),So=t("p"),Wc=o("This is to ensure cross-origin isolation, which protects against memory being exfiltrated somehow (I might explore this in the future, but that\u2019s about all I know for the moment.) webassembly memories can also be created with a backing SharedArrayBuffer, which allows fast multithreading, as separate web-workers can run the same webassembly module and write their results to the same memory, meaning that large objects don\u2019t need to be passed around using postmessage, and the many O(N) overheads to do with copying and creating new arrays can be avoided."),jc=r(),it=t("p"),zc=o("However, while Assemblyscript "),ut=t("a"),Gc=o("allows"),Nc=o(" access to atomic instructions, it does not implement any sort of locking. So any program that reads and writes to memory will need to be adjusted to thread with shared memory. This means that the program seen above, with its Complex class and set calls reading and wrxiting to the linear memory quite often, is very prone to\u2026 interesting behaviour when threaded."),Hc=r(),ke=t("div"),kt=t("img"),Bc=r(),Ao=t("p"),Fc=o("Exhibit A of nondeterministic behavior"),Jc=r(),Io=t("p"),Yc=o("That being said, for small examples such as fractal calculation, it\u2019s quite easy to limit mutability to local variables (which are on the stack, not in the linear memory, and so are not shared) and avoid the problem entirely. Like in the following code:"),Uc=r(),he=t("pre"),Xc=r(),Ro=t("p"),Mo=t("em"),qc=o("note that the store instruction there might look like it would cause issues, but as long as threads work on different parts of the image, that should not be a problem."),Vc=r(),Co=t("h3"),$c=o("SIMD"),Kc=r(),Po=t("p"),Zc=o("SIMD (Single Instruction Multiple Data) instructions are special instructions on the CPU that allow multiple additions, multiplications etc to be carried out in parallel on the same core)"),Qc=r(),Do=t("p"),de=t("img"),ai=r(),me=t("p"),si=o("By Vadikus - Own work, CC BY-SA 4.0, "),ht=t("a"),ni=o("https://commons.wikimedia.org/w/index.php?curid=39715273"),ti=r(),ys=t("p"),ei=o("They\u2019re not in the webassembly spec as yet, but should be "),dt=t("a"),oi=o("soon"),pi=o(", and are currently available on chrome and firefox (although not on ARM in firefox 89, ie. apple M1.) Assemblyscript does not autovectorize code, but "),mt=t("a"),li=o("allows"),ri=o(" access to the instructions, and provides some sugar for different types and functions to initialise constant vectors."),ci=r(),vs=t("p"),ii=o("The vector size in the proposal is 128 bit, which is a decent compromise and is backed by hardware instructions on most modern computers. In the future, "),ft=t("a"),ui=o("flexible vectors"),ki=o(", should be able to allow access to 256, 512 bit vectors that modern intel and AMD CPUs support (consumer ARM chips currently only have 128 bit vectors, as far as I\u2019m aware, although "),wt=t("a"),hi=o("supercomputer ARM chips do have 512 bit vectors"),di=o(".)"),mi=r(),Oo=t("p"),fi=o("Vectorizing the mandelbrot code above is not too bad, althought it does look rather messy:"),wi=r(),fe=t("pre"),bi=r(),Lo=t("p"),yi=o("This should basically be a 4x speedup over the previous code, when run single threaded. Multithreaded, that number will vary depending on how threads are allocated, as work only gets completed as fast as the slowest thread."),vi=r(),Wo=t("h3"),_i=o("Compiler Flags"),gi=r(),_s=t("p"),Ei=o("For the examples above, some memory is reserved for the purposes of storing the image, in assemblyscript this is achieved by passing the "),jo=t("code"),Ti=o("--memoryBase"),xi=o(" flag to the "),zo=t("code"),Si=o("asc"),Ai=o(" compiler (as seen in the makefile below)"),Ii=r(),bt=t("p"),Ri=o("The other flags are tuned for maximum performance (thanks to "),yt=t("a"),Mi=o("Max Graey"),Ci=o(" for -O3 instead of -O3s/z) and to enable necessary features (threads, SIMD.)"),Pi=r(),we=t("pre"),Di=r(),Go=t("h3"),Oi=o("Multithreaded SIMD Speed"),Li=r(),gs=t("p"),Wi=o("Benchmark results will be discussed near the end of this article, but the speed of the multithreaded SIMD code is quite astonishing, roughly 3x the speed of multithreaded JS using sharedarraybuffers, and I\u2019m guessing that\u2019s held back by module message passing overheads. "),vt=t("a"),ji=o("HERE"),zi=o(" is a basic mandelbrot zoom implementation using it (only works in firefox(\u226590 on apple m1) and chrome, "),_t=t("a"),Gi=o("here\u2019s"),Ni=o(" the github repo.) I\u2019ll be working in boundary estimation and period checking along with xaos zoom algorithm into it in a couple of months, so stay tuned for that!"),Hi=r(),No=t("p"),Bi=o("I\u2019m also fairly certain that this is the first(?) SIMD mandelbrot implementation for webassembly, so if anyone wants to use it for anything (under the terms of the GPLv3 License) feel free!"),Fi=r(),Ho=t("p"),Bo=t("em"),Ji=o("[1] A page being 64KiB (65,536 bytes), so about 6.5 mb max memory"),Jp=r(),Yp=t("br"),Up=r(),Xp=t("br"),qp=r(),be=t("h2"),Yi=o("Results"),Vp=r(),ye=t("p"),Ui=o("First, we know that our benchmarks here are not rigorous in the slightest. Their purpose was to give us an idea of the rough performance capabilities of the tools we\u2019re working with, to help inform our choices as we port certain programs (stay tuned!) to webassembly. We will be refining this tool in the future, and hope to have (somehow) bytecode outputs and flamegraphs on the site."),$p=r(),en=t("table"),Fo=t("thead"),Es=t("tr"),Jo=t("th"),Xi=o("Benchmark"),qi=r(),Yo=t("th"),Vi=o("Firefox 89(ms)"),$i=r(),Uo=t("th"),Ki=o("Chrome 91 (ms)"),Zi=r(),M=t("tbody"),Ts=t("tr"),Xo=t("td"),Qi=o("Naive-js"),au=r(),qo=t("td"),su=o("2992"),nu=r(),Vo=t("td"),tu=o("631"),eu=r(),xs=t("tr"),$o=t("td"),ou=o("Improved-js"),pu=r(),Ko=t("td"),lu=o("1755"),ru=r(),Zo=t("td"),cu=o("292"),iu=r(),Ss=t("tr"),Qo=t("td"),uu=o("Multithreaded-js"),ku=r(),ap=t("td"),hu=o("705"),du=r(),sp=t("td"),mu=o("129"),fu=r(),As=t("tr"),np=t("td"),wu=o("Singlethreaded-Rust * **"),bu=r(),tp=t("td"),yu=o("296"),vu=r(),ep=t("td"),_u=o("300"),gu=r(),Is=t("tr"),op=t("td"),Eu=o("Simple Assemblyscript"),Tu=r(),pp=t("td"),xu=o("494"),Su=r(),lp=t("td"),Au=o("497"),Iu=r(),Rs=t("tr"),rp=t("td"),Ru=o("Optimized non-SIMD AssemblyScript"),Mu=r(),cp=t("td"),Cu=o("250"),Pu=r(),ip=t("td"),Du=o("262"),Ou=r(),Ms=t("tr"),up=t("td"),Lu=o("Optimized SIMD AssemblyScript"),Wu=r(),kp=t("td"),ju=o("124"),zu=r(),hp=t("td"),Gu=o("108"),Nu=r(),Cs=t("tr"),dp=t("td"),Hu=o("SIMD Multithreaded AssemblyScript"),Bu=r(),mp=t("td"),Fu=o("43"),Ju=r(),fp=t("td"),Yu=o("43"),Kp=r(),ve=t("p"),wp=t("em"),Uu=o("All numbers approximate, gathered from fresh browser session after reboot on an HP Envy 13 with an i5-8265U CPU @ 1.60GHz and 8gb of RAM running Ubuntu 20.04.2 with kernel 5.8.0. Average of 5 runs (first 2 runs dropped)"),Zp=r(),on=t("p"),Xu=o("The results of our benchmark (at least approximately) line up with what one would expect, but we find a few items of interest. First, as far as the javascript implementations are concerned, Firefox is "),bp=t("em"),qu=o("significantly"),Vu=o(" slower than chrome. Second, webassembly speeds are comparable for both browsers."),Qp=r(),_e=t("p"),$u=o("The performance advantage of webassembly (without SIMD) over javascript for this benchmark is basically negligible for chrome. In a future article it\u2019ll be interesting to see whether the bytecode generated is also similar."),al=r(),pn=t("p"),Ku=o("But the key insight here is clear, webassembly offers "),yp=t("em"),Zu=o("predictable"),Qu=o(" performance, across browser engines. We\u2019ll be adding fallbacks for safari later to see if this holds there as well. Further, we\u2019ll compare the results to native code."),sl=r(),gt=t("p"),ak=o("*"),vp=t("em"),sk=o("The rust code can likely be sped up with some optimizations here and there, but for a rough effort from a novice rust programmer, this is representative."),nl=r(),ge=t("p"),_p=t("em"),nk=o("** The rust code was improved by @MaxGraey and now lines up with what one would expect"),tl=r(),ln=t("p"),tk=o("See the demo "),Et=t("a"),ek=o("here"),ok=o("."),el=r(),ol=t("br"),pl=r(),Ee=t("h2"),pk=o("Final Thoughts"),ll=r(),rn=t("p"),lk=o("As tools of application distribution, browsers have some undeniable advantages over the traditional pipeline of download \u2192 extract onto disk \u2192 load from disk for execution. For most programs, it is technically unnecessary to have "),gp=t("em"),rk=o("all"),ck=o(" of their assets present to be able to enjoy some subset of their capabilities. Of course, adding such partial update capabilities is non-trivial, and would add significant complexity. But web developers and browser vendors have made a lot of progress in enabling this essentially by default, and with webassembly, enabling it in areas where it\u2019s not previously been feasible."),rl=r(),cn=t("p"),ik=o("Further, cloud offloading enables users to easily sustain state across devices and in some cases avoid calculation heavy code in the interests of battery life or smooth performance. The easiest way to realize these advantages is to distribute one\u2019s application in an environment that does this "),Ep=t("em"),uk=o("by default"),kk=o(": the browser. But a prerequisite for this is that the experience is not overly hampered by being in the browser, and bringing webassembly to near native performance is a key part of that."),cl=r(),Te=t("p"),hk=o("There is an opportunity here to allow people to access performance heavy applications like games and simulations on their devices without having to get into the nasty business of managing local state, which accounts for what, 99% of problems installing and using software? We want to help build this, and over the next few weeks, will be releasing demos to show what it might look like, so stay tuned!"),il=r(),xe=t("p"),Tp=t("em"),dk=o("Of course, the possible bad end here is that the canvas ends up as an inefficient GUI toolkit to have fungible programmers at the cost of user experience, we hope that doesn\u2019t happen."),ul=r(),kl=t("br"),hl=r(),Se=t("h2"),mk=o("Further Reading:"),dl=r(),Tt=t("p"),fk=o("David Beazley. (2019). A Talk Near the Future of Python (a.k.a., Dave live-codes a Webassembly Interpreter). "),xt=t("a"),wk=o("https://www.youtube.com/watch?v=r-A78RgMhZU"),ml=r(),St=t("p"),bk=o("Firefox\u2019s low-latency webassembly compiler \u2013 wingolog. (n.d.). Retrieved June 19, 2021, from "),At=t("a"),yk=o("https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),fl=r(),It=t("p"),vk=o("firefox\u2019s low-latency webassembly compiler\u2014Wingolog. (n.d.). Retrieved June 19, 2021, from "),Rt=t("a"),_k=o("https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),wl=r(),Mt=t("p"),gk=o("Pereira, F. M. Q., & Palsberg, J. (2006). Register Allocation After Classical SSA Elimination is NP-Complete. In L. Aceto & A. Ing\xF3lfsd\xF3ttir (Eds.), Foundations of Software Science and Computation Structures (Vol. 3921, pp. 79\u201393). Springer Berlin Heidelberg. "),Ct=t("a"),Ek=o("https://doi.org/10.1007/11690634_6"),bl=r(),Pt=t("p"),Tk=o("WebAssembly. (n.d.). Retrieved June 19, 2021, from "),Dt=t("a"),xk=o("https://webassembly.org/"),yl=r(),Ot=t("p"),Sk=o("WebAssembly compilation pipeline \xB7 V8. (n.d.). Retrieved June 19, 2021, from "),Lt=t("a"),Ak=o("https://v8.dev/docs/wasm-compilation-pipeline"),vl=r(),Ae=t("p"),xp=t("em"),Ik=o(Zm),this.h()},l(n){g=e(n,"DIV",{align:!0});var k=l(g);T=e(k,"IMG",{style:!0,src:!0,alt:!0}),k.forEach(s),A=c(n),v=e(n,"H2",{});var Xk=l(v);C=p(Xk,"Introduction"),Xk.forEach(s),O=c(n),F=e(n,"P",{});var Ie=l(F);kn=p(Ie,"Hey, welcome to the Feather Systems blog. This is the first post of many, documenting our journey towards creating simpler systems for better performance on the web. This post will document our initial experiments rendering the Mandelbrot set with JavaScript, Web-workers & emerging web technologies like webassembly. You can access the project "),z=e(Ie,"A",{href:!0,rel:!0});var qk=l(z);hn=p(qk,"here"),qk.forEach(s),dn=p(Ie," and view the code "),$=e(Ie,"A",{href:!0,rel:!0});var Vk=l($);Pa=p(Vk,"here"),Vk.forEach(s),mn=p(Ie,". These experiments were tested and measured by the team to properly document each technology\u2019s advantages & disadvantages."),Ie.forEach(s),ss=c(n),G=e(n,"P",{});var $k=l(G);fn=p($k,"To elucidate, let\u2019s start with fractals & the mandelbrot set:"),$k.forEach(s),K=c(n),Da=e(n,"H2",{});var Kk=l(Da);wn=p(Kk,"The Mandelbrot Set"),Kk.forEach(s),ns=c(n),I=e(n,"P",{});var Re=l(I);bn=p(Re,"The Mandelbrot Set is defined as the set of complex numbers for which the function "),Ym(N.$$.fragment,Re),yn=p(Re," does not diverge when "),Ym(ca.$$.fragment,Re),Ps=p(Re,". An image of how the Mandelbrot set looks as follows. Points shaded black are in the set. We are using the Mandelbrot set to benchmark our code."),Re.forEach(s),ia=c(n),ua=e(n,"DIV",{align:!0});var Zk=l(ua);Z=e(Zk,"IMG",{style:!0,src:!0,alt:!0}),Zk.forEach(s),Ds=c(n),J=e(n,"P",{});var gl=l(J);vn=p(gl,"The Mandelbrot Set is stunning. We highly recommend getting lost in its beauty using our rendering website ("),ha=e(gl,"A",{href:!0,rel:!0});var Qk=l(ha);Os=p(Qk,"https://mandelbrot-ascript.vercel.app/"),Qk.forEach(s),Oa=p(gl,"). Click to zoom and Shift + Click to zoom out."),gl.forEach(s),da=c(n),La=e(n,"H2",{});var ah=l(La);Ls=p(ah,"Benchmark Structure"),ah.forEach(s),ma=c(n),U=e(n,"P",{});var Sp=l(U);Q=e(Sp,"A",{href:!0,rel:!0});var sh=l(Q);Wa=p(sh,"The benchmarking site"),sh.forEach(s),ja=p(Sp," is designed to display each iteration we developed with a rough estimate for performance measured in milliseconds. For each version, a function was written to perform the Mandelbrot calculations and return a JavaScript ImageData object that could be easily put on the Canvas. Once the user selects a version from the drop down menu, the corresponding function is called. Since the functions can take some time to complete, they are called from a Web-worker to prevent the main thread from freezing while the function runs. The performance is calculated using "),ts=e(Sp,"CODE",{});var nh=l(ts);Ws=p(nh,"performance.now()"),nh.forEach(s),X=p(Sp," calls before and after the function call that returns the ImageData object."),Sp.forEach(s),js=c(n),aa=e(n,"P",{});var th=l(aa);_n=p(th,"Across all iterations, I used the following values:"),th.forEach(s),zs=c(n),H=e(n,"PRE",{class:!0});var lf=l(H);lf.forEach(s),es=c(n),B=e(n,"P",{});var eh=l(B);os=e(eh,"STRONG",{});var oh=l(os);fa=p(oh,"FOR MULTITHREADED"),oh.forEach(s),eh.forEach(s),Gs=c(n),wa=e(n,"PRE",{class:!0});var rf=l(wa);rf.forEach(s),ba=c(n),sa=e(n,"P",{});var El=l(sa);Ns=p(El,"We assume that the canvas width and height are integers. To determine if a point was in the Mandelbrot set, we iterated the Mandelbrot function on the point up to "),P=e(El,"CODE",{});var ph=l(P);gn=p(ph,"ITER_CONST"),ph.forEach(s),ps=p(El,", returning the number of times the function had iterated. We use the returned Mandelbrot value to set the color."),El.forEach(s),Hs=c(n),na=e(n,"P",{});var Tl=l(na);ls=p(Tl,"You may notice that RGB values get clamped at 255, making it seem like the exercise of iterating all the way to 1000 is just for the sake of testing performance, which it is. (Here is a whole list of "),ya=e(Tl,"A",{href:!0,rel:!0});var lh=l(ya);En=p(lh,"smarter and better coloring algorithms"),lh.forEach(s),va=p(Tl," that we will not be using in this benchmarking exercise.)"),Tl.forEach(s),Bs=c(n),za=e(n,"P",{});var rh=l(za);Fs=p(rh,"As of when this article was published, the following versions are available on the Benchmarking Site:"),rh.forEach(s),ta=c(n),x=e(n,"UL",{});var Y=l(x);Ga=e(Y,"LI",{});var ch=l(Ga);ea=p(ch,"Naive JS single threaded"),ch.forEach(s),Tn=c(Y),_a=e(Y,"LI",{});var ih=l(_a);xn=p(ih,"Rust WASM using bindgen (single threaded)"),ih.forEach(s),Sn=c(Y),Na=e(Y,"LI",{});var uh=l(Na);L=p(uh,"Assemblyscript old version (single threaded, not thread safe)"),uh.forEach(s),An=c(Y),ga=e(Y,"LI",{});var kh=l(ga);In=p(kh,"Assemblyscript new version (single threaded, thread safe)"),kh.forEach(s),Rn=c(Y),Ea=e(Y,"LI",{});var hh=l(Ea);Mn=p(hh,"Assemblyscript SIMD WASM (singlethreaded, multithreaded)"),hh.forEach(s),Cn=c(Y),Ta=e(Y,"LI",{});var dh=l(Ta);Pn=p(dh,"New JS(less memory allocation) singlethreaded"),dh.forEach(s),Dn=c(Y),Ha=e(Y,"LI",{});var mh=l(Ha);Ba=p(mh,"New JS SharedMemoryBuffer multithreaded"),mh.forEach(s),Y.forEach(s),Js=c(n),rs=e(n,"BR",{}),R=c(n),Ys=e(n,"BR",{}),Fa=c(n),xa=e(n,"H2",{});var Rk=l(xa);On=p(Rk,"Implementing the Mandelbrot Set in JavaScript "),Sa=e(Rk,"EM",{});var fh=l(Sa);Ln=p(fh,"by Abhinuv Allu"),fh.forEach(s),Rk.forEach(s),Us=c(n),w=e(n,"DETAILS",{});var y=l(w);cs=e(y,"SUMMARY",{});var wh=l(cs);Wn=p(wh,"Click to Read"),wh.forEach(s),is=c(y),us=e(y,"P",{});var bh=l(us);jn=p(bh,"I began the testing process with the web\u2019s best frenemy, Javascipt."),bh.forEach(s),Xs=c(y),oa=e(y,"P",{});var yh=l(oa);Ja=p(yh,"I started with a naive approach to implement the Mandelbrot set in JavaScript and then try and optimize later. I started by creating a class for Complex numbers. This class would be able to add, multiply and return the magnitude. For the magnitude, I used a library function Math.hypot. Down below is our first initial implementation of the Complex class."),yh.forEach(s),zn=c(y),Aa=e(y,"PRE",{class:!0});var cf=l(Aa);cf.forEach(s),Gn=c(y),Ya=e(y,"P",{});var vh=l(Ya);Ua=p(vh,"The program iterated through each element of the canvas to compute whether or not they were in the Mandelbrot set."),vh.forEach(s),Nn=c(y),Ia=e(y,"PRE",{class:!0});var uf=l(Ia);uf.forEach(s),Xa=c(y),ks=e(y,"P",{});var _h=l(ks);$s=p(_h,"These data points were added to an array which is then painted onto the Canvas. I had some ideas about optimizations with help from the profiler, however the most fascinating insight was that the Math.hypot function for two numbers is an order of magnitude slower than squaring, adding, and then computing the square root. During the profiling of the initial code I found out that Math.hypot was taking up most of the time."),_h.forEach(s),qa=c(y),Va=e(y,"DIV",{align:!0});var gh=l(Va);pa=e(gh,"IMG",{style:!0,src:!0,alt:!0}),gh.forEach(s),Ra=c(y),Ks=e(y,"H3",{});var Eh=l(Ks);u=p(Eh,"Improved JavaScript"),Eh.forEach(s),f=c(y),la=e(y,"P",{});var Th=l(la);zt=p(Th,"To improve the initial naive approach, I decided to add multithreading. I started this with a naive way of having the worker compute each point and then send it back to receive the next point but, the message overhead was immense and resulted in a single threaded function as I only had one worker. The next step was experimenting with divisibility classes to add multiple workers. But this had the same problem where the overhead of sending & receiving a message from the workers was just too much. Eventually, I figured out that I would have each worker compute a set number of rows at a time."),Th.forEach(s),Gt=c(y),hs=e(y,"PRE",{class:!0});var kf=l(hs);kf.forEach(s),Ht=c(y),Ma=e(y,"PRE",{class:!0});var hf=l(Ma);hf.forEach(s),Bt=c(y),Ka=e(y,"H3",{});var xh=l(Ka);Ft=p(xh,"Shared Buffer"),xh.forEach(s),Jt=c(y),Zs=e(y,"P",{});var Sh=l(Zs);Yt=p(Sh,"Since all the points would be added to the same array it would make sense that having a shared buffer to reduce the overhead needed to send array points would decrease the compute time. So I added a shared buffer that was formatted like an ImageData object so it would be easier to paint it onto the canvas. This required some rewriting of the some steps here and there, but it ended up being faster."),Sh.forEach(s),Ut=c(y),Qs=e(y,"P",{});var Ah=l(Qs);ds=p(Ah,"The other issue with using a Shared Buffer is that I had to add promises to the code, so werefactored it to include promises."),Ah.forEach(s),Xt=c(y),ms=e(y,"PRE",{class:!0});var df=l(ms);df.forEach(s),Vt=c(y),fs=e(y,"PRE",{class:!0});var mf=l(fs);mf.forEach(s),$t=c(y),Qa=e(y,"P",{});var xl=l(Qa);Kt=p(xl,"These changes made the code perform a lot better. You can check out it\u2019s performance in the \u201D"),ws=e(xl,"A",{href:!0,rel:!0});var Ih=l(ws);an=p(Ih,"Results"),Ih.forEach(s),Zt=p(xl,"\u201D section. JavaScript was extremely performant (especially on Chrome) and gave us hope that pushing the boundaries of speed on the web was possible."),xl.forEach(s),y.forEach(s),q=c(n),Hn=e(n,"BR",{}),Bn=c(n),Fn=e(n,"BR",{}),Jn=c(n),D=e(n,"H2",{});var Mk=l(D);Qt=p(Mk,"So, What is Webassembly? "),sn=e(Mk,"EM",{});var Rh=l(sn);ae=p(Rh,"by Abhishek Cherath"),Rh.forEach(s),Mk.forEach(s),Yn=c(n),E=e(n,"DETAILS",{});var S=l(E);nn=e(S,"SUMMARY",{});var Mh=l(nn);se=p(Mh,"Click to Read"),Mh.forEach(s),ne=c(S),ra=e(S,"P",{});var Me=l(ra);te=p(Me,`In our quest to further optimize performance, we used webassembly, an emerging web technology optimized for what we are trying to achieve. So, what is it?
Insofar as an overview is concerned, nothing beats Lin Clark\u2019s cartoon intro `),as=e(Me,"A",{href:!0,rel:!0});var Ch=l(as);ee=p(Ch,"here"),Ch.forEach(s),Jl=p(Me,", and the MDN docs "),Un=e(Me,"A",{href:!0,rel:!0});var Ph=l(Un);Yl=p(Ph,"here"),Ph.forEach(s),Ul=p(Me,". Put simply, webassembly is a low level typed language that targets the browser\u2019s VM. For some reasons[1] , it\u2019s very quick and easy to compile into decently fast machine code."),Me.forEach(s),Xl=c(S),qe=e(S,"P",{});var Dh=l(qe);ql=p(Dh,"Fundamentally, the language was designed to offer the best possible latency (time to execution) and speed of execution. Low latency is achieved by having a small binary representation (vs javascript\u2019s textual representation) and having type definitions and a function table at the start of a .wasm module, which allows compilers to compile in a streaming fashion, instead of needing to have access to the entire file before starting."),Dh.forEach(s),Vl=c(S),Xn=e(S,"P",{});var Sl=l(Xn);$l=p(Sl,"Speed of execution requires slow compilation with multiple passes for the compiler to accurately assess the best register allocation, optimize out unnecessary instructions and do whatever other things compilers do. ("),Ve=e(Sl,"EM",{});var Oh=l(Ve);Kl=p(Oh,"note: I have frankly no idea what goes into compiler optimization, I just know it takes time"),Oh.forEach(s),Zl=p(Sl,")"),Sl.forEach(s),Ql=c(S),qn=e(S,"P",{});var Al=l(qn);ar=p(Al,"To satisfy both these goals, browsers (atleast Firefox and Chrome) have two compilers for webassembly, the first compiles the module as it\u2019s called from the network, and is basically instant ("),Vn=e(Al,"A",{href:!0,rel:!0});var Lh=l(Vn);sr=p(Lh,"here"),Lh.forEach(s),nr=p(Al,", chrome devs claim that theirs can do on the order of 10+ mb of code per second, so the bottleneck will almost always be the speed of the network rather than the compiler.) The second does optimization and dynamically replaces the unoptimized bytecode from the first when it\u2019s done."),Al.forEach(s),tr=c(S),$n=e(S,"P",{});var Il=l($n);er=p(Il,"It\u2019s interesting to note here that, "),$e=e(Il,"EM",{});var Wh=l($e);or=p(Wh,"a priori"),Wh.forEach(s),pr=p(Il," there\u2019s no reason to expect that webassembly code for high performance stuff [2] (like fractal calculation) will be any faster than its javascript counterpart. Since the hot loop (calculating escape time) is running many thousands of times, one would expect the javascript JIT compiler to infer the output types and get basically similar bytecode, while amortizing its greater overhead considering workload size."),Il.forEach(s),lr=c(S),Ke=e(S,"P",{});var jh=l(Ke);rr=p(jh,"In a later article, I will be examining this conjecture, and taking a deeper look at the flamegraphs and bytecode generated by our benchmarks."),jh.forEach(s),cr=c(S),Ze=e(S,"P",{});var zh=l(Ze);ir=p(zh,"The other interesting thing about webassembly is its memory model, programs do not have access to their own instructions and stack machine memory (so no self modifying code, and no messing with values on the stack). What they do have access to is a block of linear memory, which is backed by a javascript ArrayBuffer, and byte addressed (ie. memory[0] is 1 byte long.)"),zh.forEach(s),ur=c(S),Qe=e(S,"P",{});var Gh=l(Qe);ao=e(Gh,"EM",{});var Nh=l(ao);kr=p(Nh,"[1]I\u2019m not entirely sure why, but it\u2019s some combination of coding for a simple stack machine, having type information, linear memory, and being easy to parse."),Nh.forEach(s),Gh.forEach(s),hr=c(S),Kn=e(S,"P",{});var Rl=l(Kn);Zn=e(Rl,"EM",{});var Ml=l(Zn);dr=p(Ml,"[2]This is "),so=e(Ml,"STRONG",{});var Hh=l(so);mr=p(Hh,"mostly"),Hh.forEach(s),fr=p(Ml," true, except for vectorization. SIMD (Single Instruction Multiple Data) instructions are featured in the webassembly spec and implemented by chrome and firefox, which do not expose them in js, and have no plans to do so. (although"),Ml.forEach(s),wr=p(Rl," I "),no=e(Rl,"EM",{});var Bh=l(no);br=p(Bh,"suppose there\u2019s nothing stopping a JIT from autovectorizing, is there?)"),Bh.forEach(s),Rl.forEach(s),S.forEach(s),Rp=c(n),Mp=e(n,"BR",{}),Cp=e(n,"BR",{}),Pp=c(n),oe=e(n,"BLOCKQUOTE",{});var Fh=l(oe);pe=e(Fh,"P",{});var Ck=l(pe);to=e(Ck,"STRONG",{});var Jh=l(to);yr=p(Jh,"Our Approach to webassembly"),Jh.forEach(s),vr=p(Ck,": As many languages can be compiled to webassembly, we looked at two of the most commonly used ones: Rust & AssemblyScript. In the following sections we will describe our approach to these two languages."),Ck.forEach(s),Fh.forEach(s),Dp=c(n),Op=e(n,"BR",{}),Lp=e(n,"BR",{}),Wp=c(n),Qn=e(n,"H2",{});var Pk=l(Qn);_r=p(Pk,"Rust Implementation "),eo=e(Pk,"EM",{});var Yh=l(eo);gr=p(Yh,"by Jo Gao"),Yh.forEach(s),Pk.forEach(s),jp=c(n),b=e(n,"DETAILS",{});var _=l(b);oo=e(_,"SUMMARY",{});var Uh=l(oo);Er=p(Uh,"Click to Read"),Uh.forEach(s),Tr=c(_),po=e(_,"H3",{});var Xh=l(po);xr=p(Xh,"Singlethreaded"),Xh.forEach(s),Sr=c(_),at=e(_,"P",{});var Cl=l(at);Ar=p(Cl,"I wrote a similar implementation of the function in Rust that would return an ImageData object of the Mandelbrot Set. It uses "),st=e(Cl,"A",{href:!0,rel:!0});var qh=l(st);Ir=p(qh,"wasm-bindgen"),qh.forEach(s),Rr=p(Cl,", a Rust library that will compile Rust code to webassembly, and then generate the bindings and glue between JavaScript and webassembly so that it can be run on the web. It handles all the type conversions between JavaScript and webassembly and facilitates the compilation of Rust to webassembly."),Cl.forEach(s),Mr=c(_),Ca=e(_,"P",{});var un=l(Ca);Cr=p(un,"In the iterative "),lo=e(un,"CODE",{});var Vh=l(lo);Pr=p(Vh,"in_mandelbrot"),Vh.forEach(s),Dr=p(un," function, "),ro=e(un,"CODE",{});var $h=l(ro);Or=p($h,"count"),$h.forEach(s),Lr=p(un," is set to iterate all the way to 1000 for benchmarking purposes. When returning, "),co=e(un,"CODE",{});var Kh=l(co);Wr=p(Kh,"count"),Kh.forEach(s),jr=p(un," is set to 255 if larger than 255 to prevent having to cast numbers larger than 255 to u8."),un.forEach(s),zr=c(_),le=e(_,"PRE",{class:!0});var ff=l(le);ff.forEach(s),Gr=c(_),io=e(_,"P",{});var Zh=l(io);Nr=p(Zh,"The magic of wasm-bindgen kicks in here, allowing us to create the ImageData object right in the Rust code by providing the type and the constructor signature:"),Zh.forEach(s),Hr=c(_),re=e(_,"PRE",{class:!0});var wf=l(re);wf.forEach(s),Br=c(_),bs=e(_,"P",{});var Ce=l(bs);Fr=p(Ce,"After compiling this code, wasm-bindgen outputs a number of files that are meant to be bundled using "),nt=e(Ce,"A",{href:!0,rel:!0});var Qh=l(nt);Jr=p(Qh,"Webpack"),Qh.forEach(s),Yr=p(Ce," and imported to your JavaScript file as an ES6 module, allowing access to the functions that were written in Rust. The idea is that after compiling and importing the module, calling "),uo=e(Ce,"CODE",{});var ad=l(uo);Ur=p(ad,"run(...)"),ad.forEach(s),Xr=p(Ce,"would return a whole JavaScript ImageData Object."),Ce.forEach(s),qr=c(_),ko=e(_,"P",{});var sd=l(ko);Vr=p(sd,"Unfortunately, our Benchmarking Site is structured to use a web worker to call this function. Modules cannot be imported to web workers. However, they can be imported to module workers, web workers that support module import, but as of today, Firefox does not support this feature."),sd.forEach(s),$r=c(_),tt=e(_,"P",{});var Pl=l(tt);Kr=p(Pl,"This is an infeasible solution because I was unwilling to limit the availability of our benchmark site for this implementation. After many hours of tinkering with the existing setup, I found a workaround that eliminated the need for Webpack altogether: after compiling with wasm-bindgen, I copy and pasted the entire outputted .js file with the import and exports removed, appended the wrapper function I had written to it, and called "),ho=e(Pl,"CODE",{});var nd=l(ho);Zr=p(nd,"init(...)"),nd.forEach(s),Qr=p(Pl," on the outputted .wasm."),Pl.forEach(s),ac=c(_),mo=e(_,"P",{});var td=l(mo);sc=p(td,"After confirming that this worked, A colleague and I wrote a shell script to automatically do this after compilation. Albeit a little unpleasant on the eyes, it does the job:"),td.forEach(s),nc=c(_),ce=e(_,"PRE",{class:!0});var bf=l(ce);bf.forEach(s),tc=c(_),fo=e(_,"H3",{});var ed=l(fo);ec=p(ed,"Rust & Webassembly Multi-Threaded"),ed.forEach(s),oc=c(_),wo=e(_,"P",{});var od=l(wo);pc=p(od,"To further improve performance in Rust, I carried out the same calculations, but in parallel this time. An advantage of the Mandelbrot Set is that determining whether a pixel falls within the set or not can be done completely independently of other pixels. The outcome of each pixel has no effect on the others, making the transition to multithreading straightforward."),od.forEach(s),lc=c(_),et=e(_,"P",{});var Dl=l(et);rc=p(Dl,"I used the "),ot=e(Dl,"A",{href:!0,rel:!0});var pd=l(ot);cc=p(pd,"Parallel Raytracing example"),pd.forEach(s),ic=p(Dl,". given in the Wasm-Bindgen repo, as a starting point. Using a combination of web workers and the Rayon Crate for data parallelism in Rust yielded a pretty fast multithreaded Mandelbrot Set."),Dl.forEach(s),uc=c(_),tn=e(_,"P",{});var Ap=l(tn);bo=e(Ap,"EM",{});var ld=l(bo);kc=p(ld,"Unfortunately,"),ld.forEach(s),hc=p(Ap," I "),yo=e(Ap,"EM",{});var rd=l(yo);dc=p(rd,"was unable to include this version of the Mandelbrot in the final Benchmarking website"),rd.forEach(s),mc=p(Ap," because I ran into a similar problem with the wasm-bindgen and module output. This time, it was further complicated by the Webworkers being created from within the Rust code. The funky workaround that had allowed for the singlethreaded RustWasm example to run on the Benchmarking Site failed to work the same magic for this implementation."),Ap.forEach(s),fc=c(_),vo=e(_,"P",{});var cd=l(vo);wc=p(cd,"This version of the Mandelbrot also makes use of the SharedArrayBuffer, and had it been on the site, would not work in Safari and browsers that do not support SharedArrayBuffer Objects."),cd.forEach(s),_.forEach(s),zp=c(n),Gp=e(n,"BR",{}),Np=c(n),Hp=e(n,"BR",{}),Bp=c(n),pt=e(n,"H2",{});var Dk=l(pt);bc=p(Dk,"AssemblyScript "),_o=e(Dk,"EM",{});var id=l(_o);yc=p(id,"by Abhishek Cherath"),id.forEach(s),Dk.forEach(s),Fp=c(n),d=e(n,"DETAILS",{});var m=l(d);go=e(m,"SUMMARY",{});var ud=l(go);vc=p(ud,"Click to Read"),ud.forEach(s),_c=c(m),Eo=e(m,"P",{});var kd=l(Eo);gc=p(kd,"AssemblyScript compiles a subset of typescript to webassembly. To get an idea of how simple it is to write it, here\u2019s essentially the same javascript code from earlier, with type annotations and minor changes for webassembly:"),kd.forEach(s),Ec=c(m),ie=e(m,"PRE",{class:!0});var yf=l(ie);yf.forEach(s),Tc=c(m),lt=e(m,"P",{});var Ol=l(lt);xc=p(Ol,"The only really noteworthy change was to not have "),To=e(Ol,"CODE",{});var hd=l(To);Sc=p(hd,"new"),hd.forEach(s),Ac=p(Ol," in the hot loop. The Assemblyscript garbage collector had some trouble with it and total allocation would exceed webassembly\u2019s 100 page memory limit[1]. I suspect that sort of code will be usable once the webassembly GC proposals, which allow wasm modules to hook into the browser\u2019s GC, are implemented."),Ol.forEach(s),Ic=c(m),xo=e(m,"H3",{});var dd=l(xo);Rc=p(dd,"Threading"),dd.forEach(s),Mc=c(m),rt=e(m,"P",{});var Ll=l(rt);Cc=p(Ll,"The fastest way to thread code in browsers is to use "),ct=e(Ll,"A",{href:!0,rel:!0});var md=l(ct);Pc=p(md,"SharedArrayBuffer"),md.forEach(s),Dc=p(Ll,", this also requires the following CORS headers."),Ll.forEach(s),Oc=c(m),ue=e(m,"PRE",{class:!0});var vf=l(ue);vf.forEach(s),Lc=c(m),So=e(m,"P",{});var fd=l(So);Wc=p(fd,"This is to ensure cross-origin isolation, which protects against memory being exfiltrated somehow (I might explore this in the future, but that\u2019s about all I know for the moment.) webassembly memories can also be created with a backing SharedArrayBuffer, which allows fast multithreading, as separate web-workers can run the same webassembly module and write their results to the same memory, meaning that large objects don\u2019t need to be passed around using postmessage, and the many O(N) overheads to do with copying and creating new arrays can be avoided."),fd.forEach(s),jc=c(m),it=e(m,"P",{});var Wl=l(it);zc=p(Wl,"However, while Assemblyscript "),ut=e(Wl,"A",{href:!0,rel:!0});var wd=l(ut);Gc=p(wd,"allows"),wd.forEach(s),Nc=p(Wl," access to atomic instructions, it does not implement any sort of locking. So any program that reads and writes to memory will need to be adjusted to thread with shared memory. This means that the program seen above, with its Complex class and set calls reading and wrxiting to the linear memory quite often, is very prone to\u2026 interesting behaviour when threaded."),Wl.forEach(s),Hc=c(m),ke=e(m,"DIV",{align:!0});var bd=l(ke);kt=e(bd,"IMG",{style:!0,src:!0,alt:!0}),bd.forEach(s),Bc=c(m),Ao=e(m,"P",{});var yd=l(Ao);Fc=p(yd,"Exhibit A of nondeterministic behavior"),yd.forEach(s),Jc=c(m),Io=e(m,"P",{});var vd=l(Io);Yc=p(vd,"That being said, for small examples such as fractal calculation, it\u2019s quite easy to limit mutability to local variables (which are on the stack, not in the linear memory, and so are not shared) and avoid the problem entirely. Like in the following code:"),vd.forEach(s),Uc=c(m),he=e(m,"PRE",{class:!0});var _f=l(he);_f.forEach(s),Xc=c(m),Ro=e(m,"P",{});var _d=l(Ro);Mo=e(_d,"EM",{});var gd=l(Mo);qc=p(gd,"note that the store instruction there might look like it would cause issues, but as long as threads work on different parts of the image, that should not be a problem."),gd.forEach(s),_d.forEach(s),Vc=c(m),Co=e(m,"H3",{});var Ed=l(Co);$c=p(Ed,"SIMD"),Ed.forEach(s),Kc=c(m),Po=e(m,"P",{});var Td=l(Po);Zc=p(Td,"SIMD (Single Instruction Multiple Data) instructions are special instructions on the CPU that allow multiple additions, multiplications etc to be carried out in parallel on the same core)"),Td.forEach(s),Qc=c(m),Do=e(m,"P",{});var xd=l(Do);de=e(xd,"IMG",{src:!0,alt:!0}),xd.forEach(s),ai=c(m),me=e(m,"P",{});var Ok=l(me);si=p(Ok,"By Vadikus - Own work, CC BY-SA 4.0, "),ht=e(Ok,"A",{href:!0,rel:!0});var Sd=l(ht);ni=p(Sd,"https://commons.wikimedia.org/w/index.php?curid=39715273"),Sd.forEach(s),Ok.forEach(s),ti=c(m),ys=e(m,"P",{});var Pe=l(ys);ei=p(Pe,"They\u2019re not in the webassembly spec as yet, but should be "),dt=e(Pe,"A",{href:!0,rel:!0});var Ad=l(dt);oi=p(Ad,"soon"),Ad.forEach(s),pi=p(Pe,", and are currently available on chrome and firefox (although not on ARM in firefox 89, ie. apple M1.) Assemblyscript does not autovectorize code, but "),mt=e(Pe,"A",{href:!0,rel:!0});var Id=l(mt);li=p(Id,"allows"),Id.forEach(s),ri=p(Pe," access to the instructions, and provides some sugar for different types and functions to initialise constant vectors."),Pe.forEach(s),ci=c(m),vs=e(m,"P",{});var De=l(vs);ii=p(De,"The vector size in the proposal is 128 bit, which is a decent compromise and is backed by hardware instructions on most modern computers. In the future, "),ft=e(De,"A",{href:!0,rel:!0});var Rd=l(ft);ui=p(Rd,"flexible vectors"),Rd.forEach(s),ki=p(De,", should be able to allow access to 256, 512 bit vectors that modern intel and AMD CPUs support (consumer ARM chips currently only have 128 bit vectors, as far as I\u2019m aware, although "),wt=e(De,"A",{href:!0,rel:!0});var Md=l(wt);hi=p(Md,"supercomputer ARM chips do have 512 bit vectors"),Md.forEach(s),di=p(De,".)"),De.forEach(s),mi=c(m),Oo=e(m,"P",{});var Cd=l(Oo);fi=p(Cd,"Vectorizing the mandelbrot code above is not too bad, althought it does look rather messy:"),Cd.forEach(s),wi=c(m),fe=e(m,"PRE",{class:!0});var gf=l(fe);gf.forEach(s),bi=c(m),Lo=e(m,"P",{});var Pd=l(Lo);yi=p(Pd,"This should basically be a 4x speedup over the previous code, when run single threaded. Multithreaded, that number will vary depending on how threads are allocated, as work only gets completed as fast as the slowest thread."),Pd.forEach(s),vi=c(m),Wo=e(m,"H3",{});var Dd=l(Wo);_i=p(Dd,"Compiler Flags"),Dd.forEach(s),gi=c(m),_s=e(m,"P",{});var Oe=l(_s);Ei=p(Oe,"For the examples above, some memory is reserved for the purposes of storing the image, in assemblyscript this is achieved by passing the "),jo=e(Oe,"CODE",{});var Od=l(jo);Ti=p(Od,"--memoryBase"),Od.forEach(s),xi=p(Oe," flag to the "),zo=e(Oe,"CODE",{});var Ld=l(zo);Si=p(Ld,"asc"),Ld.forEach(s),Ai=p(Oe," compiler (as seen in the makefile below)"),Oe.forEach(s),Ii=c(m),bt=e(m,"P",{});var jl=l(bt);Ri=p(jl,"The other flags are tuned for maximum performance (thanks to "),yt=e(jl,"A",{href:!0,rel:!0});var Wd=l(yt);Mi=p(Wd,"Max Graey"),Wd.forEach(s),Ci=p(jl," for -O3 instead of -O3s/z) and to enable necessary features (threads, SIMD.)"),jl.forEach(s),Pi=c(m),we=e(m,"PRE",{class:!0});var Ef=l(we);Ef.forEach(s),Di=c(m),Go=e(m,"H3",{});var jd=l(Go);Oi=p(jd,"Multithreaded SIMD Speed"),jd.forEach(s),Li=c(m),gs=e(m,"P",{});var Le=l(gs);Wi=p(Le,"Benchmark results will be discussed near the end of this article, but the speed of the multithreaded SIMD code is quite astonishing, roughly 3x the speed of multithreaded JS using sharedarraybuffers, and I\u2019m guessing that\u2019s held back by module message passing overheads. "),vt=e(Le,"A",{href:!0,rel:!0});var zd=l(vt);ji=p(zd,"HERE"),zd.forEach(s),zi=p(Le," is a basic mandelbrot zoom implementation using it (only works in firefox(\u226590 on apple m1) and chrome, "),_t=e(Le,"A",{href:!0,rel:!0});var Gd=l(_t);Gi=p(Gd,"here\u2019s"),Gd.forEach(s),Ni=p(Le," the github repo.) I\u2019ll be working in boundary estimation and period checking along with xaos zoom algorithm into it in a couple of months, so stay tuned for that!"),Le.forEach(s),Hi=c(m),No=e(m,"P",{});var Nd=l(No);Bi=p(Nd,"I\u2019m also fairly certain that this is the first(?) SIMD mandelbrot implementation for webassembly, so if anyone wants to use it for anything (under the terms of the GPLv3 License) feel free!"),Nd.forEach(s),Fi=c(m),Ho=e(m,"P",{});var Hd=l(Ho);Bo=e(Hd,"EM",{});var Bd=l(Bo);Ji=p(Bd,"[1] A page being 64KiB (65,536 bytes), so about 6.5 mb max memory"),Bd.forEach(s),Hd.forEach(s),m.forEach(s),Jp=c(n),Yp=e(n,"BR",{}),Up=c(n),Xp=e(n,"BR",{}),qp=c(n),be=e(n,"H2",{});var Fd=l(be);Yi=p(Fd,"Results"),Fd.forEach(s),Vp=c(n),ye=e(n,"P",{});var Jd=l(ye);Ui=p(Jd,"First, we know that our benchmarks here are not rigorous in the slightest. Their purpose was to give us an idea of the rough performance capabilities of the tools we\u2019re working with, to help inform our choices as we port certain programs (stay tuned!) to webassembly. We will be refining this tool in the future, and hope to have (somehow) bytecode outputs and flamegraphs on the site."),Jd.forEach(s),$p=c(n),en=e(n,"TABLE",{});var zl=l(en);Fo=e(zl,"THEAD",{});var Yd=l(Fo);Es=e(Yd,"TR",{});var We=l(Es);Jo=e(We,"TH",{});var Ud=l(Jo);Xi=p(Ud,"Benchmark"),Ud.forEach(s),qi=c(We),Yo=e(We,"TH",{});var Xd=l(Yo);Vi=p(Xd,"Firefox 89(ms)"),Xd.forEach(s),$i=c(We),Uo=e(We,"TH",{});var qd=l(Uo);Ki=p(qd,"Chrome 91 (ms)"),qd.forEach(s),We.forEach(s),Yd.forEach(s),Zi=c(zl),M=e(zl,"TBODY",{});var W=l(M);Ts=e(W,"TR",{});var je=l(Ts);Xo=e(je,"TD",{});var Vd=l(Xo);Qi=p(Vd,"Naive-js"),Vd.forEach(s),au=c(je),qo=e(je,"TD",{});var $d=l(qo);su=p($d,"2992"),$d.forEach(s),nu=c(je),Vo=e(je,"TD",{});var Kd=l(Vo);tu=p(Kd,"631"),Kd.forEach(s),je.forEach(s),eu=c(W),xs=e(W,"TR",{});var ze=l(xs);$o=e(ze,"TD",{});var Zd=l($o);ou=p(Zd,"Improved-js"),Zd.forEach(s),pu=c(ze),Ko=e(ze,"TD",{});var Qd=l(Ko);lu=p(Qd,"1755"),Qd.forEach(s),ru=c(ze),Zo=e(ze,"TD",{});var am=l(Zo);cu=p(am,"292"),am.forEach(s),ze.forEach(s),iu=c(W),Ss=e(W,"TR",{});var Ge=l(Ss);Qo=e(Ge,"TD",{});var sm=l(Qo);uu=p(sm,"Multithreaded-js"),sm.forEach(s),ku=c(Ge),ap=e(Ge,"TD",{});var nm=l(ap);hu=p(nm,"705"),nm.forEach(s),du=c(Ge),sp=e(Ge,"TD",{});var tm=l(sp);mu=p(tm,"129"),tm.forEach(s),Ge.forEach(s),fu=c(W),As=e(W,"TR",{});var Ne=l(As);np=e(Ne,"TD",{});var em=l(np);wu=p(em,"Singlethreaded-Rust * **"),em.forEach(s),bu=c(Ne),tp=e(Ne,"TD",{});var om=l(tp);yu=p(om,"296"),om.forEach(s),vu=c(Ne),ep=e(Ne,"TD",{});var pm=l(ep);_u=p(pm,"300"),pm.forEach(s),Ne.forEach(s),gu=c(W),Is=e(W,"TR",{});var He=l(Is);op=e(He,"TD",{});var lm=l(op);Eu=p(lm,"Simple Assemblyscript"),lm.forEach(s),Tu=c(He),pp=e(He,"TD",{});var rm=l(pp);xu=p(rm,"494"),rm.forEach(s),Su=c(He),lp=e(He,"TD",{});var cm=l(lp);Au=p(cm,"497"),cm.forEach(s),He.forEach(s),Iu=c(W),Rs=e(W,"TR",{});var Be=l(Rs);rp=e(Be,"TD",{});var im=l(rp);Ru=p(im,"Optimized non-SIMD AssemblyScript"),im.forEach(s),Mu=c(Be),cp=e(Be,"TD",{});var um=l(cp);Cu=p(um,"250"),um.forEach(s),Pu=c(Be),ip=e(Be,"TD",{});var km=l(ip);Du=p(km,"262"),km.forEach(s),Be.forEach(s),Ou=c(W),Ms=e(W,"TR",{});var Fe=l(Ms);up=e(Fe,"TD",{});var hm=l(up);Lu=p(hm,"Optimized SIMD AssemblyScript"),hm.forEach(s),Wu=c(Fe),kp=e(Fe,"TD",{});var dm=l(kp);ju=p(dm,"124"),dm.forEach(s),zu=c(Fe),hp=e(Fe,"TD",{});var mm=l(hp);Gu=p(mm,"108"),mm.forEach(s),Fe.forEach(s),Nu=c(W),Cs=e(W,"TR",{});var Je=l(Cs);dp=e(Je,"TD",{});var fm=l(dp);Hu=p(fm,"SIMD Multithreaded AssemblyScript"),fm.forEach(s),Bu=c(Je),mp=e(Je,"TD",{});var wm=l(mp);Fu=p(wm,"43"),wm.forEach(s),Ju=c(Je),fp=e(Je,"TD",{});var bm=l(fp);Yu=p(bm,"43"),bm.forEach(s),Je.forEach(s),W.forEach(s),zl.forEach(s),Kp=c(n),ve=e(n,"P",{});var ym=l(ve);wp=e(ym,"EM",{});var vm=l(wp);Uu=p(vm,"All numbers approximate, gathered from fresh browser session after reboot on an HP Envy 13 with an i5-8265U CPU @ 1.60GHz and 8gb of RAM running Ubuntu 20.04.2 with kernel 5.8.0. Average of 5 runs (first 2 runs dropped)"),vm.forEach(s),ym.forEach(s),Zp=c(n),on=e(n,"P",{});var Gl=l(on);Xu=p(Gl,"The results of our benchmark (at least approximately) line up with what one would expect, but we find a few items of interest. First, as far as the javascript implementations are concerned, Firefox is "),bp=e(Gl,"EM",{});var _m=l(bp);qu=p(_m,"significantly"),_m.forEach(s),Vu=p(Gl," slower than chrome. Second, webassembly speeds are comparable for both browsers."),Gl.forEach(s),Qp=c(n),_e=e(n,"P",{});var gm=l(_e);$u=p(gm,"The performance advantage of webassembly (without SIMD) over javascript for this benchmark is basically negligible for chrome. In a future article it\u2019ll be interesting to see whether the bytecode generated is also similar."),gm.forEach(s),al=c(n),pn=e(n,"P",{});var Nl=l(pn);Ku=p(Nl,"But the key insight here is clear, webassembly offers "),yp=e(Nl,"EM",{});var Em=l(yp);Zu=p(Em,"predictable"),Em.forEach(s),Qu=p(Nl," performance, across browser engines. We\u2019ll be adding fallbacks for safari later to see if this holds there as well. Further, we\u2019ll compare the results to native code."),Nl.forEach(s),sl=c(n),gt=e(n,"P",{});var Lk=l(gt);ak=p(Lk,"*"),vp=e(Lk,"EM",{});var Tm=l(vp);sk=p(Tm,"The rust code can likely be sped up with some optimizations here and there, but for a rough effort from a novice rust programmer, this is representative."),Tm.forEach(s),Lk.forEach(s),nl=c(n),ge=e(n,"P",{});var xm=l(ge);_p=e(xm,"EM",{});var Sm=l(_p);nk=p(Sm,"** The rust code was improved by @MaxGraey and now lines up with what one would expect"),Sm.forEach(s),xm.forEach(s),tl=c(n),ln=e(n,"P",{});var Hl=l(ln);tk=p(Hl,"See the demo "),Et=e(Hl,"A",{href:!0,rel:!0});var Am=l(Et);ek=p(Am,"here"),Am.forEach(s),ok=p(Hl,"."),Hl.forEach(s),el=c(n),ol=e(n,"BR",{}),pl=c(n),Ee=e(n,"H2",{});var Im=l(Ee);pk=p(Im,"Final Thoughts"),Im.forEach(s),ll=c(n),rn=e(n,"P",{});var Bl=l(rn);lk=p(Bl,"As tools of application distribution, browsers have some undeniable advantages over the traditional pipeline of download \u2192 extract onto disk \u2192 load from disk for execution. For most programs, it is technically unnecessary to have "),gp=e(Bl,"EM",{});var Rm=l(gp);rk=p(Rm,"all"),Rm.forEach(s),ck=p(Bl," of their assets present to be able to enjoy some subset of their capabilities. Of course, adding such partial update capabilities is non-trivial, and would add significant complexity. But web developers and browser vendors have made a lot of progress in enabling this essentially by default, and with webassembly, enabling it in areas where it\u2019s not previously been feasible."),Bl.forEach(s),rl=c(n),cn=e(n,"P",{});var Fl=l(cn);ik=p(Fl,"Further, cloud offloading enables users to easily sustain state across devices and in some cases avoid calculation heavy code in the interests of battery life or smooth performance. The easiest way to realize these advantages is to distribute one\u2019s application in an environment that does this "),Ep=e(Fl,"EM",{});var Mm=l(Ep);uk=p(Mm,"by default"),Mm.forEach(s),kk=p(Fl,": the browser. But a prerequisite for this is that the experience is not overly hampered by being in the browser, and bringing webassembly to near native performance is a key part of that."),Fl.forEach(s),cl=c(n),Te=e(n,"P",{});var Cm=l(Te);hk=p(Cm,"There is an opportunity here to allow people to access performance heavy applications like games and simulations on their devices without having to get into the nasty business of managing local state, which accounts for what, 99% of problems installing and using software? We want to help build this, and over the next few weeks, will be releasing demos to show what it might look like, so stay tuned!"),Cm.forEach(s),il=c(n),xe=e(n,"P",{});var Pm=l(xe);Tp=e(Pm,"EM",{});var Dm=l(Tp);dk=p(Dm,"Of course, the possible bad end here is that the canvas ends up as an inefficient GUI toolkit to have fungible programmers at the cost of user experience, we hope that doesn\u2019t happen."),Dm.forEach(s),Pm.forEach(s),ul=c(n),kl=e(n,"BR",{}),hl=c(n),Se=e(n,"H2",{});var Om=l(Se);mk=p(Om,"Further Reading:"),Om.forEach(s),dl=c(n),Tt=e(n,"P",{});var Wk=l(Tt);fk=p(Wk,"David Beazley. (2019). A Talk Near the Future of Python (a.k.a., Dave live-codes a Webassembly Interpreter). "),xt=e(Wk,"A",{href:!0,rel:!0});var Lm=l(xt);wk=p(Lm,"https://www.youtube.com/watch?v=r-A78RgMhZU"),Lm.forEach(s),Wk.forEach(s),ml=c(n),St=e(n,"P",{});var jk=l(St);bk=p(jk,"Firefox\u2019s low-latency webassembly compiler \u2013 wingolog. (n.d.). Retrieved June 19, 2021, from "),At=e(jk,"A",{href:!0,rel:!0});var Wm=l(At);yk=p(Wm,"https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),Wm.forEach(s),jk.forEach(s),fl=c(n),It=e(n,"P",{});var zk=l(It);vk=p(zk,"firefox\u2019s low-latency webassembly compiler\u2014Wingolog. (n.d.). Retrieved June 19, 2021, from "),Rt=e(zk,"A",{href:!0,rel:!0});var jm=l(Rt);_k=p(jm,"https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),jm.forEach(s),zk.forEach(s),wl=c(n),Mt=e(n,"P",{});var Gk=l(Mt);gk=p(Gk,"Pereira, F. M. Q., & Palsberg, J. (2006). Register Allocation After Classical SSA Elimination is NP-Complete. In L. Aceto & A. Ing\xF3lfsd\xF3ttir (Eds.), Foundations of Software Science and Computation Structures (Vol. 3921, pp. 79\u201393). Springer Berlin Heidelberg. "),Ct=e(Gk,"A",{href:!0,rel:!0});var zm=l(Ct);Ek=p(zm,"https://doi.org/10.1007/11690634_6"),zm.forEach(s),Gk.forEach(s),bl=c(n),Pt=e(n,"P",{});var Nk=l(Pt);Tk=p(Nk,"WebAssembly. (n.d.). Retrieved June 19, 2021, from "),Dt=e(Nk,"A",{href:!0,rel:!0});var Gm=l(Dt);xk=p(Gm,"https://webassembly.org/"),Gm.forEach(s),Nk.forEach(s),yl=c(n),Ot=e(n,"P",{});var Hk=l(Ot);Sk=p(Hk,"WebAssembly compilation pipeline \xB7 V8. (n.d.). Retrieved June 19, 2021, from "),Lt=e(Hk,"A",{href:!0,rel:!0});var Nm=l(Lt);Ak=p(Nm,"https://v8.dev/docs/wasm-compilation-pipeline"),Nm.forEach(s),Hk.forEach(s),vl=c(n),Ae=e(n,"P",{});var Hm=l(Ae);xp=e(Hm,"EM",{});var Bm=l(xp);Ik=p(Bm,Zm),Bm.forEach(s),Hm.forEach(s),this.h()},h(){Ue(T,"width","100%"),Wt(T.src,j="/blog-1-mandel-thumbnail.webp")||h(T,"src",j),h(T,"alt","Thumbnail"),h(g,"align","center"),h(z,"href","https://js-wasm-mandelbrot-benchmark-3.vercel.app/"),h(z,"rel","nofollow"),h($,"href","https://github.com/AO-Design-Inc/js-wasm-mandelbrot-benchmark"),h($,"rel","nofollow"),Ue(Z,"width","100%"),Wt(Z.src,ka="/blog-1-mandel-renderer.png")||h(Z,"src",ka),h(Z,"alt","Thumbnail"),h(ua,"align","center"),h(ha,"href","https://mandelbrot-ascript.vercel.app/"),h(ha,"rel","nofollow"),h(Q,"href","https://js-wasm-mandelbrot-benchmark-3.vercel.app/"),h(Q,"rel","nofollow"),h(H,"class","language-jsx"),h(wa,"class","language-jsx"),h(ya,"href","https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set"),h(ya,"rel","nofollow"),h(Aa,"class","language-jsx"),h(Ia,"class","language-jsx"),Ue(pa,"width","100%"),Wt(pa.src,$a="/blog-1-mandel-hypnot.png")||h(pa,"src",$a),h(pa,"alt","Thumbnail"),h(Va,"align","center"),h(hs,"class","language-jsx"),h(Ma,"class","language-jsx"),h(ms,"class","language-jsx"),h(fs,"class","language-jsx"),h(ws,"href","https://www.notion.so/On-WebAssembly-Performance-and-the-Mandelbrot-WORKING-TITLE-96760f3f113343c894c00f52cdef3ef0"),h(ws,"rel","nofollow"),h(as,"href","https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/"),h(as,"rel","nofollow"),h(Un,"href","https://developer.mozilla.org/en-US/docs/WebAssembly"),h(Un,"rel","nofollow"),h(Vn,"href","https://v8.dev/docs/wasm-compilation-pipeline"),h(Vn,"rel","nofollow"),h(st,"href","https://rustwasm.github.io/wasm-bindgen/"),h(st,"rel","nofollow"),h(le,"class","language-rust"),h(re,"class","language-rust"),h(nt,"href","https://webpack.js.org/"),h(nt,"rel","nofollow"),h(ce,"class","language-bash"),h(ot,"href","https://github.com/rustwasm/wasm-bindgen/tree/master/examples/raytrace-parallel"),h(ot,"rel","nofollow"),h(ie,"class","language-jsx"),h(ct,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer"),h(ct,"rel","nofollow"),h(ue,"class","language-jsx"),h(ut,"href","https://www.assemblyscript.org/stdlib/builtins.html#atomics-%F0%9F%A6%84"),h(ut,"rel","nofollow"),Ue(kt,"width","100%"),Wt(kt.src,Yk="/blog-1-mandel-glitch.png")||h(kt,"src",Yk),h(kt,"alt","Thumbnail"),h(ke,"align","center"),h(he,"class","language-jsx"),Wt(de.src,Uk="https://upload.wikimedia.org/wikipedia/commons/c/ce/SIMD2.svg")||h(de,"src",Uk),h(de,"alt","SIMD Explaination"),h(ht,"href","https://commons.wikimedia.org/w/index.php?curid=39715273"),h(ht,"rel","nofollow"),h(dt,"href","https://webassembly.github.io/simd/core/exec/instructions.html#simd-instructions"),h(dt,"rel","nofollow"),h(mt,"href","https://www.assemblyscript.org/stdlib/builtins.html#simd-%F0%9F%A6%84"),h(mt,"rel","nofollow"),h(ft,"href","https://github.com/WebAssembly/flexible-vectors"),h(ft,"rel","nofollow"),h(wt,"href","https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)"),h(wt,"rel","nofollow"),h(fe,"class","language-jsx"),h(yt,"href","https://github.com/MaxGraey"),h(yt,"rel","nofollow"),h(we,"class","language-makefile"),h(vt,"href","https://mandelbrot-ascript.vercel.app/"),h(vt,"rel","nofollow"),h(_t,"href","https://github.com/pretentious7/mandelbrot-ascript"),h(_t,"rel","nofollow"),h(Et,"href","https://js-wasm-mandelbrot-benchmark-3.vercel.app/"),h(Et,"rel","nofollow"),h(xt,"href","https://www.youtube.com/watch?v=r-A78RgMhZU"),h(xt,"rel","nofollow"),h(At,"href","https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),h(At,"rel","nofollow"),h(Rt,"href","https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler"),h(Rt,"rel","nofollow"),h(Ct,"href","https://doi.org/10.1007/11690634_6"),h(Ct,"rel","nofollow"),h(Dt,"href","https://webassembly.org/"),h(Dt,"rel","nofollow"),h(Lt,"href","https://v8.dev/docs/wasm-compilation-pipeline"),h(Lt,"rel","nofollow")},m(n,k){i(n,g,k),a(g,T),i(n,A,k),i(n,v,k),a(v,C),i(n,O,k),i(n,F,k),a(F,kn),a(F,z),a(z,hn),a(F,dn),a(F,$),a($,Pa),a(F,mn),i(n,ss,k),i(n,G,k),a(G,fn),i(n,K,k),i(n,Da,k),a(Da,wn),i(n,ns,k),i(n,I,k),a(I,bn),Um(N,I,null),a(I,yn),Um(ca,I,null),a(I,Ps),i(n,ia,k),i(n,ua,k),a(ua,Z),i(n,Ds,k),i(n,J,k),a(J,vn),a(J,ha),a(ha,Os),a(J,Oa),i(n,da,k),i(n,La,k),a(La,Ls),i(n,ma,k),i(n,U,k),a(U,Q),a(Q,Wa),a(U,ja),a(U,ts),a(ts,Ws),a(U,X),i(n,js,k),i(n,aa,k),a(aa,_n),i(n,zs,k),i(n,H,k),H.innerHTML=Xe,i(n,es,k),i(n,B,k),a(B,os),a(os,fa),i(n,Gs,k),i(n,wa,k),wa.innerHTML=jt,i(n,ba,k),i(n,sa,k),a(sa,Ns),a(sa,P),a(P,gn),a(sa,ps),i(n,Hs,k),i(n,na,k),a(na,ls),a(na,ya),a(ya,En),a(na,va),i(n,Bs,k),i(n,za,k),a(za,Fs),i(n,ta,k),i(n,x,k),a(x,Ga),a(Ga,ea),a(x,Tn),a(x,_a),a(_a,xn),a(x,Sn),a(x,Na),a(Na,L),a(x,An),a(x,ga),a(ga,In),a(x,Rn),a(x,Ea),a(Ea,Mn),a(x,Cn),a(x,Ta),a(Ta,Pn),a(x,Dn),a(x,Ha),a(Ha,Ba),i(n,Js,k),i(n,rs,k),i(n,R,k),i(n,Ys,k),i(n,Fa,k),i(n,xa,k),a(xa,On),a(xa,Sa),a(Sa,Ln),i(n,Us,k),i(n,w,k),a(w,cs),a(cs,Wn),a(w,is),a(w,us),a(us,jn),a(w,Xs),a(w,oa),a(oa,Ja),a(w,zn),a(w,Aa),Aa.innerHTML=qs,a(w,Gn),a(w,Ya),a(Ya,Ua),a(w,Nn),a(w,Ia),Ia.innerHTML=Vs,a(w,Xa),a(w,ks),a(ks,$s),a(w,qa),a(w,Va),a(Va,pa),a(w,Ra),a(w,Ks),a(Ks,u),a(w,f),a(w,la),a(la,zt),a(w,Gt),a(w,hs),hs.innerHTML=Nt,a(w,Ht),a(w,Ma),Ma.innerHTML=Ip,a(w,Bt),a(w,Ka),a(Ka,Ft),a(w,Jt),a(w,Zs),a(Zs,Yt),a(w,Ut),a(w,Qs),a(Qs,ds),a(w,Xt),a(w,ms),ms.innerHTML=qt,a(w,Vt),a(w,fs),fs.innerHTML=Za,a(w,$t),a(w,Qa),a(Qa,Kt),a(Qa,ws),a(ws,an),a(Qa,Zt),i(n,q,k),i(n,Hn,k),i(n,Bn,k),i(n,Fn,k),i(n,Jn,k),i(n,D,k),a(D,Qt),a(D,sn),a(sn,ae),i(n,Yn,k),i(n,E,k),a(E,nn),a(nn,se),a(E,ne),a(E,ra),a(ra,te),a(ra,as),a(as,ee),a(ra,Jl),a(ra,Un),a(Un,Yl),a(ra,Ul),a(E,Xl),a(E,qe),a(qe,ql),a(E,Vl),a(E,Xn),a(Xn,$l),a(Xn,Ve),a(Ve,Kl),a(Xn,Zl),a(E,Ql),a(E,qn),a(qn,ar),a(qn,Vn),a(Vn,sr),a(qn,nr),a(E,tr),a(E,$n),a($n,er),a($n,$e),a($e,or),a($n,pr),a(E,lr),a(E,Ke),a(Ke,rr),a(E,cr),a(E,Ze),a(Ze,ir),a(E,ur),a(E,Qe),a(Qe,ao),a(ao,kr),a(E,hr),a(E,Kn),a(Kn,Zn),a(Zn,dr),a(Zn,so),a(so,mr),a(Zn,fr),a(Kn,wr),a(Kn,no),a(no,br),i(n,Rp,k),i(n,Mp,k),i(n,Cp,k),i(n,Pp,k),i(n,oe,k),a(oe,pe),a(pe,to),a(to,yr),a(pe,vr),i(n,Dp,k),i(n,Op,k),i(n,Lp,k),i(n,Wp,k),i(n,Qn,k),a(Qn,_r),a(Qn,eo),a(eo,gr),i(n,jp,k),i(n,b,k),a(b,oo),a(oo,Er),a(b,Tr),a(b,po),a(po,xr),a(b,Sr),a(b,at),a(at,Ar),a(at,st),a(st,Ir),a(at,Rr),a(b,Mr),a(b,Ca),a(Ca,Cr),a(Ca,lo),a(lo,Pr),a(Ca,Dr),a(Ca,ro),a(ro,Or),a(Ca,Lr),a(Ca,co),a(co,Wr),a(Ca,jr),a(b,zr),a(b,le),le.innerHTML=Qm,a(b,Gr),a(b,io),a(io,Nr),a(b,Hr),a(b,re),re.innerHTML=af,a(b,Br),a(b,bs),a(bs,Fr),a(bs,nt),a(nt,Jr),a(bs,Yr),a(bs,uo),a(uo,Ur),a(bs,Xr),a(b,qr),a(b,ko),a(ko,Vr),a(b,$r),a(b,tt),a(tt,Kr),a(tt,ho),a(ho,Zr),a(tt,Qr),a(b,ac),a(b,mo),a(mo,sc),a(b,nc),a(b,ce),ce.innerHTML=sf,a(b,tc),a(b,fo),a(fo,ec),a(b,oc),a(b,wo),a(wo,pc),a(b,lc),a(b,et),a(et,rc),a(et,ot),a(ot,cc),a(et,ic),a(b,uc),a(b,tn),a(tn,bo),a(bo,kc),a(tn,hc),a(tn,yo),a(yo,dc),a(tn,mc),a(b,fc),a(b,vo),a(vo,wc),i(n,zp,k),i(n,Gp,k),i(n,Np,k),i(n,Hp,k),i(n,Bp,k),i(n,pt,k),a(pt,bc),a(pt,_o),a(_o,yc),i(n,Fp,k),i(n,d,k),a(d,go),a(go,vc),a(d,_c),a(d,Eo),a(Eo,gc),a(d,Ec),a(d,ie),ie.innerHTML=nf,a(d,Tc),a(d,lt),a(lt,xc),a(lt,To),a(To,Sc),a(lt,Ac),a(d,Ic),a(d,xo),a(xo,Rc),a(d,Mc),a(d,rt),a(rt,Cc),a(rt,ct),a(ct,Pc),a(rt,Dc),a(d,Oc),a(d,ue),ue.innerHTML=tf,a(d,Lc),a(d,So),a(So,Wc),a(d,jc),a(d,it),a(it,zc),a(it,ut),a(ut,Gc),a(it,Nc),a(d,Hc),a(d,ke),a(ke,kt),a(d,Bc),a(d,Ao),a(Ao,Fc),a(d,Jc),a(d,Io),a(Io,Yc),a(d,Uc),a(d,he),he.innerHTML=ef,a(d,Xc),a(d,Ro),a(Ro,Mo),a(Mo,qc),a(d,Vc),a(d,Co),a(Co,$c),a(d,Kc),a(d,Po),a(Po,Zc),a(d,Qc),a(d,Do),a(Do,de),a(d,ai),a(d,me),a(me,si),a(me,ht),a(ht,ni),a(d,ti),a(d,ys),a(ys,ei),a(ys,dt),a(dt,oi),a(ys,pi),a(ys,mt),a(mt,li),a(ys,ri),a(d,ci),a(d,vs),a(vs,ii),a(vs,ft),a(ft,ui),a(vs,ki),a(vs,wt),a(wt,hi),a(vs,di),a(d,mi),a(d,Oo),a(Oo,fi),a(d,wi),a(d,fe),fe.innerHTML=of,a(d,bi),a(d,Lo),a(Lo,yi),a(d,vi),a(d,Wo),a(Wo,_i),a(d,gi),a(d,_s),a(_s,Ei),a(_s,jo),a(jo,Ti),a(_s,xi),a(_s,zo),a(zo,Si),a(_s,Ai),a(d,Ii),a(d,bt),a(bt,Ri),a(bt,yt),a(yt,Mi),a(bt,Ci),a(d,Pi),a(d,we),we.innerHTML=pf,a(d,Di),a(d,Go),a(Go,Oi),a(d,Li),a(d,gs),a(gs,Wi),a(gs,vt),a(vt,ji),a(gs,zi),a(gs,_t),a(_t,Gi),a(gs,Ni),a(d,Hi),a(d,No),a(No,Bi),a(d,Fi),a(d,Ho),a(Ho,Bo),a(Bo,Ji),i(n,Jp,k),i(n,Yp,k),i(n,Up,k),i(n,Xp,k),i(n,qp,k),i(n,be,k),a(be,Yi),i(n,Vp,k),i(n,ye,k),a(ye,Ui),i(n,$p,k),i(n,en,k),a(en,Fo),a(Fo,Es),a(Es,Jo),a(Jo,Xi),a(Es,qi),a(Es,Yo),a(Yo,Vi),a(Es,$i),a(Es,Uo),a(Uo,Ki),a(en,Zi),a(en,M),a(M,Ts),a(Ts,Xo),a(Xo,Qi),a(Ts,au),a(Ts,qo),a(qo,su),a(Ts,nu),a(Ts,Vo),a(Vo,tu),a(M,eu),a(M,xs),a(xs,$o),a($o,ou),a(xs,pu),a(xs,Ko),a(Ko,lu),a(xs,ru),a(xs,Zo),a(Zo,cu),a(M,iu),a(M,Ss),a(Ss,Qo),a(Qo,uu),a(Ss,ku),a(Ss,ap),a(ap,hu),a(Ss,du),a(Ss,sp),a(sp,mu),a(M,fu),a(M,As),a(As,np),a(np,wu),a(As,bu),a(As,tp),a(tp,yu),a(As,vu),a(As,ep),a(ep,_u),a(M,gu),a(M,Is),a(Is,op),a(op,Eu),a(Is,Tu),a(Is,pp),a(pp,xu),a(Is,Su),a(Is,lp),a(lp,Au),a(M,Iu),a(M,Rs),a(Rs,rp),a(rp,Ru),a(Rs,Mu),a(Rs,cp),a(cp,Cu),a(Rs,Pu),a(Rs,ip),a(ip,Du),a(M,Ou),a(M,Ms),a(Ms,up),a(up,Lu),a(Ms,Wu),a(Ms,kp),a(kp,ju),a(Ms,zu),a(Ms,hp),a(hp,Gu),a(M,Nu),a(M,Cs),a(Cs,dp),a(dp,Hu),a(Cs,Bu),a(Cs,mp),a(mp,Fu),a(Cs,Ju),a(Cs,fp),a(fp,Yu),i(n,Kp,k),i(n,ve,k),a(ve,wp),a(wp,Uu),i(n,Zp,k),i(n,on,k),a(on,Xu),a(on,bp),a(bp,qu),a(on,Vu),i(n,Qp,k),i(n,_e,k),a(_e,$u),i(n,al,k),i(n,pn,k),a(pn,Ku),a(pn,yp),a(yp,Zu),a(pn,Qu),i(n,sl,k),i(n,gt,k),a(gt,ak),a(gt,vp),a(vp,sk),i(n,nl,k),i(n,ge,k),a(ge,_p),a(_p,nk),i(n,tl,k),i(n,ln,k),a(ln,tk),a(ln,Et),a(Et,ek),a(ln,ok),i(n,el,k),i(n,ol,k),i(n,pl,k),i(n,Ee,k),a(Ee,pk),i(n,ll,k),i(n,rn,k),a(rn,lk),a(rn,gp),a(gp,rk),a(rn,ck),i(n,rl,k),i(n,cn,k),a(cn,ik),a(cn,Ep),a(Ep,uk),a(cn,kk),i(n,cl,k),i(n,Te,k),a(Te,hk),i(n,il,k),i(n,xe,k),a(xe,Tp),a(Tp,dk),i(n,ul,k),i(n,kl,k),i(n,hl,k),i(n,Se,k),a(Se,mk),i(n,dl,k),i(n,Tt,k),a(Tt,fk),a(Tt,xt),a(xt,wk),i(n,ml,k),i(n,St,k),a(St,bk),a(St,At),a(At,yk),i(n,fl,k),i(n,It,k),a(It,vk),a(It,Rt),a(Rt,_k),i(n,wl,k),i(n,Mt,k),a(Mt,gk),a(Mt,Ct),a(Ct,Ek),i(n,bl,k),i(n,Pt,k),a(Pt,Tk),a(Pt,Dt),a(Dt,xk),i(n,yl,k),i(n,Ot,k),a(Ot,Sk),a(Ot,Lt),a(Lt,Ak),i(n,vl,k),i(n,Ae,k),a(Ae,xp),a(xp,Ik),_l=!0},p:Ye,i(n){_l||(Xm(N.$$.fragment,n),Xm(ca.$$.fragment,n),_l=!0)},o(n){qm(N.$$.fragment,n),qm(ca.$$.fragment,n),_l=!1},d(n){n&&s(g),n&&s(A),n&&s(v),n&&s(O),n&&s(F),n&&s(ss),n&&s(G),n&&s(K),n&&s(Da),n&&s(ns),n&&s(I),Vm(N),Vm(ca),n&&s(ia),n&&s(ua),n&&s(Ds),n&&s(J),n&&s(da),n&&s(La),n&&s(ma),n&&s(U),n&&s(js),n&&s(aa),n&&s(zs),n&&s(H),n&&s(es),n&&s(B),n&&s(Gs),n&&s(wa),n&&s(ba),n&&s(sa),n&&s(Hs),n&&s(na),n&&s(Bs),n&&s(za),n&&s(ta),n&&s(x),n&&s(Js),n&&s(rs),n&&s(R),n&&s(Ys),n&&s(Fa),n&&s(xa),n&&s(Us),n&&s(w),n&&s(q),n&&s(Hn),n&&s(Bn),n&&s(Fn),n&&s(Jn),n&&s(D),n&&s(Yn),n&&s(E),n&&s(Rp),n&&s(Mp),n&&s(Cp),n&&s(Pp),n&&s(oe),n&&s(Dp),n&&s(Op),n&&s(Lp),n&&s(Wp),n&&s(Qn),n&&s(jp),n&&s(b),n&&s(zp),n&&s(Gp),n&&s(Np),n&&s(Hp),n&&s(Bp),n&&s(pt),n&&s(Fp),n&&s(d),n&&s(Jp),n&&s(Yp),n&&s(Up),n&&s(Xp),n&&s(qp),n&&s(be),n&&s(Vp),n&&s(ye),n&&s($p),n&&s(en),n&&s(Kp),n&&s(ve),n&&s(Zp),n&&s(on),n&&s(Qp),n&&s(_e),n&&s(al),n&&s(pn),n&&s(sl),n&&s(gt),n&&s(nl),n&&s(ge),n&&s(tl),n&&s(ln),n&&s(el),n&&s(ol),n&&s(pl),n&&s(Ee),n&&s(ll),n&&s(rn),n&&s(rl),n&&s(cn),n&&s(cl),n&&s(Te),n&&s(il),n&&s(xe),n&&s(ul),n&&s(kl),n&&s(hl),n&&s(Se),n&&s(dl),n&&s(Tt),n&&s(ml),n&&s(St),n&&s(fl),n&&s(It),n&&s(wl),n&&s(Mt),n&&s(bl),n&&s(Pt),n&&s(yl),n&&s(Ot),n&&s(vl),n&&s(Ae)}}}const Km={slug:"1-mandel",title:"One of the Fastest Web Mandelbrot Renderers",date:"2021-06-21T00:00:00.000Z",summary:"Our initial experiments rendering the Mandelbrot set with JavaScript, Web-workers & emerging web technologies like webassembly.",thumbnail:"/blog-1-mandel-thumbnail.webp",tags:["WASM"],author:"Ojasvin Kirpane, Abhishek Cherath, Jo Gao & Abhinuv Allu"},{slug:Nf,title:Hf,date:Bf,summary:Ff,thumbnail:Jf,tags:Yf,author:Zm}=Km;let Cf="z_{0}=0",Pf="z*{n+1}=z_n^2+c";function Df(V){return console.log("a"),[]}class Of extends Bk{constructor(g){super();Fk(this,g,Df,Mf,Jk,{})}}var Uf=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:Of,metadata:Km});function Lf(V){let g,T,j,A,v,C,O,F,kn,z,hn,dn,$,Pa,mn,ss,G,fn,K,Da,wn,ns,I,bn,N,yn,ca,Ps,ia,ua,Z,ka,Ds,J,vn,ha,Os,Oa,da,La,Ls,ma,U,Q,Wa,ja,ts,Ws,X,js,aa,_n,zs,H,Xe,es,B,os,fa,Gs,wa,jt,ba,sa,Ns,P,gn,ps,Hs,na,ls,ya,En,va,Bs,za,Fs,ta,x=`<code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// beginning of main function</span>

	<span class="token comment">// setting up EmscriptenWebGLContextAttributes</span>
	EmscriptenWebGLContextAttributes attr<span class="token punctuation">;</span>
	<span class="token function">emscripten_webgl_init_context_attributes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	attr<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// target the canvas selector</span>
	EMSCRIPTEN_WEBGL_CONTEXT_HANDLE ctx <span class="token operator">=</span> <span class="token function">emscripten_webgl_create_context</span><span class="token punctuation">(</span><span class="token string">"#canvas"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">emscripten_webgl_make_context_current</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ga,ea,Tn,_a,xn,Sn,Na,L,An,ga,In,Rn,Ea,Mn,Cn,Ta,Pn,Dn,Ha,Ba,Js,rs,R,Ys,Fa,xa,On,Sa,Ln,Us,w,cs,Wn,is,us,jn,Xs,oa,Ja,zn,Aa,qs,Gn,Ya,Ua,Nn,Ia,Vs,Xa,ks,$s,qa,Va,pa,$a,Ra,Ks;return{c(){g=t("div"),T=t("img"),A=r(),v=t("p"),C=o("The following article is something of a hybrid between the first "),O=t("a"),F=o("Emscripten tutorial"),kn=o(" and the "),z=t("a"),hn=o("Getting Started with WebGL tutorial"),dn=o(". It builds on the previous documentation to demonstrate how to render the same content in the WebGL tutorial, but in C."),$=r(),Pa=t("p"),mn=o("This is not an Introduction to C programming or WebGL, so a basic understanding of both will be helpful. If you are new to WebGL, I would recommend at least skimming the Getting Started with WebGL tutorial linked above."),ss=r(),G=t("p"),fn=o("The focus of this article is to illustrate the bare minimum required to get WebGL up and running in C with the Emscripten compiler. And thus, if you do not yet have Emscripten installed, I would suggest doing so now from their "),K=t("a"),Da=o("download page"),wn=o("."),ns=r(),I=t("p"),bn=o("The Github repo for this tutorial is available on our "),N=t("a"),yn=o("Github"),ca=o("."),Ps=r(),ia=t("h2"),ua=o("HTML File"),Z=r(),ka=t("p"),Ds=o("The following is a barebones HTML file with a canvas element. The "),J=t("code"),vn=o("index.js"),ha=o(" script after the canvas is the file that will be generated from compiling the C code."),Os=r(),Oa=t("pre"),da=t("code"),La=o(`<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
	</head>
	<body>
		<canvas id="canvas" height="400px" width="400px"></canvas>
		<script src="index.js"><\/script>
	</body>
</html>
<h1>This is a header</h1>`),Ls=r(),ma=t("h2"),U=o("Header Files"),Q=r(),Wa=t("pre"),ja=t("code"),ts=o(`#include <emscripten/html5.h>
#include <GLES2/gl2.h>`),Ws=r(),X=t("p"),js=o("The html5 header provides the bindings required to use html elements and events from native code. For this tutorial, it will allow us to set up the WebGL context in C. You can view the full documentation for "),aa=t("code"),_n=o("emscripten/html.5.h"),zs=r(),H=t("a"),Xe=o("here"),es=r(),B=t("p"),os=o("The gl2 header provides the functions to draw and interact with the canvas context. The entire header file can be found "),fa=t("a"),Gs=o("here"),wa=o("."),jt=r(),ba=t("h2"),sa=o("Setting up the Canvas"),Ns=r(),P=t("p"),gn=o("Before we can begin drawing, we must first obtain a canvas context. The html5 header file provides the functions needed to do this. To create a canvas context, the "),ps=t("code"),Hs=o("emscripten_webgl_create_context"),na=o(" function takes a target and an "),ls=t("code"),ya=o("EmscriptenWebGLContextAttributes"),En=o(" object, used to specify various attributes for the context. A complete list of the object\u2019s attributes can be found "),va=t("a"),Bs=o("here"),za=o("."),Fs=r(),ta=t("pre"),Ga=r(),ea=t("p"),Tn=o("At the start of the main function, we create and initialize the "),_a=t("code"),xn=o("EmscriptenWebGLContextAttributes"),Sn=o(" object with all the default attributes settings except the alpha attribute, which is set to false. This is done mostly for the purpose of illustrating how to set specific attributes."),Na=r(),L=t("p"),An=o("The "),ga=t("code"),In=o("emscripten_webgl_create_context"),Rn=o(" function targets, "),Ea=t("code"),Mn=o("#canvas"),Cn=o(", the selector for the canvas element in the html file. After creating the context, we must activate it using "),Ta=t("code"),Pn=o("emscripten_webgl_make_context_current"),Dn=o(", to specify that all following GL calls will be applied to that context."),Ha=r(),Ba=t("h2"),Js=o("Drawing to the Canvas"),rs=r(),R=t("p"),Ys=o("In JavaScript, we would use "),Fa=t("code"),xa=o("clearColor"),On=o(" and "),Sa=t("code"),Ln=o("clear"),Us=o(" on the canvas context to fill in the canvas. The equivalents of these methods are provided by the gl2 header as "),w=t("code"),cs=o("glClearColor"),Wn=o(" and "),is=t("code"),us=o("glClear"),jn=o("."),Xs=r(),oa=t("pre"),Ja=t("code"),zn=o(`// this goes after you have activated the webgl context
	glClearColor(0.984, 0.4627, 0.502, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	return 1;
} // end of main function`),Aa=r(),qs=t("h2"),Gn=o("Compiling and Running"),Ya=r(),Ua=t("p"),Nn=o("To compile with Emscripten, run the following command. This will output the index.js file that is sourced from the html file."),Ia=r(),Vs=t("pre"),Xa=t("code"),ks=o("emcc main.c -o index.js"),$s=r(),qa=t("p"),Va=o("The html file can now be opened and viewed in a browser. Huzzah!"),pa=r(),$a=t("div"),Ra=t("img"),this.h()},l(u){g=e(u,"DIV",{align:!0});var f=l(g);T=e(f,"IMG",{style:!0,src:!0,alt:!0}),f.forEach(s),A=c(u),v=e(u,"P",{});var la=l(v);C=p(la,"The following article is something of a hybrid between the first "),O=e(la,"A",{href:!0,rel:!0});var zt=l(O);F=p(zt,"Emscripten tutorial"),zt.forEach(s),kn=p(la," and the "),z=e(la,"A",{href:!0,rel:!0});var Gt=l(z);hn=p(Gt,"Getting Started with WebGL tutorial"),Gt.forEach(s),dn=p(la,". It builds on the previous documentation to demonstrate how to render the same content in the WebGL tutorial, but in C."),la.forEach(s),$=c(u),Pa=e(u,"P",{});var hs=l(Pa);mn=p(hs,"This is not an Introduction to C programming or WebGL, so a basic understanding of both will be helpful. If you are new to WebGL, I would recommend at least skimming the Getting Started with WebGL tutorial linked above."),hs.forEach(s),ss=c(u),G=e(u,"P",{});var Nt=l(G);fn=p(Nt,"The focus of this article is to illustrate the bare minimum required to get WebGL up and running in C with the Emscripten compiler. And thus, if you do not yet have Emscripten installed, I would suggest doing so now from their "),K=e(Nt,"A",{href:!0,rel:!0});var Ht=l(K);Da=p(Ht,"download page"),Ht.forEach(s),wn=p(Nt,"."),Nt.forEach(s),ns=c(u),I=e(u,"P",{});var Ma=l(I);bn=p(Ma,"The Github repo for this tutorial is available on our "),N=e(Ma,"A",{href:!0,rel:!0});var Ip=l(N);yn=p(Ip,"Github"),Ip.forEach(s),ca=p(Ma,"."),Ma.forEach(s),Ps=c(u),ia=e(u,"H2",{});var Bt=l(ia);ua=p(Bt,"HTML File"),Bt.forEach(s),Z=c(u),ka=e(u,"P",{});var Ka=l(ka);Ds=p(Ka,"The following is a barebones HTML file with a canvas element. The "),J=e(Ka,"CODE",{});var Ft=l(J);vn=p(Ft,"index.js"),Ft.forEach(s),ha=p(Ka," script after the canvas is the file that will be generated from compiling the C code."),Ka.forEach(s),Os=c(u),Oa=e(u,"PRE",{});var Jt=l(Oa);da=e(Jt,"CODE",{class:!0});var Zs=l(da);La=p(Zs,`<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
	</head>
	<body>
		<canvas id="canvas" height="400px" width="400px"></canvas>
		<script src="index.js"><\/script>
	</body>
</html>
<h1>This is a header</h1>`),Zs.forEach(s),Jt.forEach(s),Ls=c(u),ma=e(u,"H2",{});var Yt=l(ma);U=p(Yt,"Header Files"),Yt.forEach(s),Q=c(u),Wa=e(u,"PRE",{});var Ut=l(Wa);ja=e(Ut,"CODE",{class:!0});var Qs=l(ja);ts=p(Qs,`#include <emscripten/html5.h>
#include <GLES2/gl2.h>`),Qs.forEach(s),Ut.forEach(s),Ws=c(u),X=e(u,"P",{});var ds=l(X);js=p(ds,"The html5 header provides the bindings required to use html elements and events from native code. For this tutorial, it will allow us to set up the WebGL context in C. You can view the full documentation for "),aa=e(ds,"CODE",{});var Xt=l(aa);_n=p(Xt,"emscripten/html.5.h"),Xt.forEach(s),zs=c(ds),H=e(ds,"A",{href:!0,rel:!0});var ms=l(H);Xe=p(ms,"here"),ms.forEach(s),ds.forEach(s),es=c(u),B=e(u,"P",{});var qt=l(B);os=p(qt,"The gl2 header provides the functions to draw and interact with the canvas context. The entire header file can be found "),fa=e(qt,"A",{href:!0,rel:!0});var Vt=l(fa);Gs=p(Vt,"here"),Vt.forEach(s),wa=p(qt,"."),qt.forEach(s),jt=c(u),ba=e(u,"H2",{});var fs=l(ba);sa=p(fs,"Setting up the Canvas"),fs.forEach(s),Ns=c(u),P=e(u,"P",{});var Za=l(P);gn=p(Za,"Before we can begin drawing, we must first obtain a canvas context. The html5 header file provides the functions needed to do this. To create a canvas context, the "),ps=e(Za,"CODE",{});var $t=l(ps);Hs=p($t,"emscripten_webgl_create_context"),$t.forEach(s),na=p(Za," function takes a target and an "),ls=e(Za,"CODE",{});var Qa=l(ls);ya=p(Qa,"EmscriptenWebGLContextAttributes"),Qa.forEach(s),En=p(Za," object, used to specify various attributes for the context. A complete list of the object\u2019s attributes can be found "),va=e(Za,"A",{href:!0,rel:!0});var Kt=l(va);Bs=p(Kt,"here"),Kt.forEach(s),za=p(Za,"."),Za.forEach(s),Fs=c(u),ta=e(u,"PRE",{class:!0});var ws=l(ta);ws.forEach(s),Ga=c(u),ea=e(u,"P",{});var an=l(ea);Tn=p(an,"At the start of the main function, we create and initialize the "),_a=e(an,"CODE",{});var Zt=l(_a);xn=p(Zt,"EmscriptenWebGLContextAttributes"),Zt.forEach(s),Sn=p(an," object with all the default attributes settings except the alpha attribute, which is set to false. This is done mostly for the purpose of illustrating how to set specific attributes."),an.forEach(s),Na=c(u),L=e(u,"P",{});var q=l(L);An=p(q,"The "),ga=e(q,"CODE",{});var Hn=l(ga);In=p(Hn,"emscripten_webgl_create_context"),Hn.forEach(s),Rn=p(q," function targets, "),Ea=e(q,"CODE",{});var Bn=l(Ea);Mn=p(Bn,"#canvas"),Bn.forEach(s),Cn=p(q,", the selector for the canvas element in the html file. After creating the context, we must activate it using "),Ta=e(q,"CODE",{});var Fn=l(Ta);Pn=p(Fn,"emscripten_webgl_make_context_current"),Fn.forEach(s),Dn=p(q,", to specify that all following GL calls will be applied to that context."),q.forEach(s),Ha=c(u),Ba=e(u,"H2",{});var Jn=l(Ba);Js=p(Jn,"Drawing to the Canvas"),Jn.forEach(s),rs=c(u),R=e(u,"P",{});var D=l(R);Ys=p(D,"In JavaScript, we would use "),Fa=e(D,"CODE",{});var Qt=l(Fa);xa=p(Qt,"clearColor"),Qt.forEach(s),On=p(D," and "),Sa=e(D,"CODE",{});var sn=l(Sa);Ln=p(sn,"clear"),sn.forEach(s),Us=p(D," on the canvas context to fill in the canvas. The equivalents of these methods are provided by the gl2 header as "),w=e(D,"CODE",{});var ae=l(w);cs=p(ae,"glClearColor"),ae.forEach(s),Wn=p(D," and "),is=e(D,"CODE",{});var Yn=l(is);us=p(Yn,"glClear"),Yn.forEach(s),jn=p(D,"."),D.forEach(s),Xs=c(u),oa=e(u,"PRE",{});var E=l(oa);Ja=e(E,"CODE",{class:!0});var nn=l(Ja);zn=p(nn,`// this goes after you have activated the webgl context
	glClearColor(0.984, 0.4627, 0.502, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	return 1;
} // end of main function`),nn.forEach(s),E.forEach(s),Aa=c(u),qs=e(u,"H2",{});var se=l(qs);Gn=p(se,"Compiling and Running"),se.forEach(s),Ya=c(u),Ua=e(u,"P",{});var ne=l(Ua);Nn=p(ne,"To compile with Emscripten, run the following command. This will output the index.js file that is sourced from the html file."),ne.forEach(s),Ia=c(u),Vs=e(u,"PRE",{});var ra=l(Vs);Xa=e(ra,"CODE",{class:!0});var te=l(Xa);ks=p(te,"emcc main.c -o index.js"),te.forEach(s),ra.forEach(s),$s=c(u),qa=e(u,"P",{});var as=l(qa);Va=p(as,"The html file can now be opened and viewed in a browser. Huzzah!"),as.forEach(s),pa=c(u),$a=e(u,"DIV",{align:!0});var ee=l($a);Ra=e(ee,"IMG",{style:!0,src:!0,alt:!0}),ee.forEach(s),this.h()},h(){Ue(T,"width","100%"),Wt(T.src,j="/blog-2-tri-thumbnail.webp")||h(T,"src",j),h(T,"alt","Thumbnail"),h(g,"align","center"),h(O,"href","https://emscripten.org/docs/getting_started/Tutorial.html"),h(O,"rel","nofollow"),h(z,"href","https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL"),h(z,"rel","nofollow"),h(K,"href","https://emscripten.org/docs/getting_started/downloads.html"),h(K,"rel","nofollow"),h(N,"href","https://github.com/AO-Design-Inc/webGL-with-emscripten"),h(N,"rel","nofollow"),h(da,"class","language-html"),h(ja,"class","language-c"),h(H,"href","https://emscripten.org/docs/api_reference/html5.h.html"),h(H,"rel","nofollow"),h(fa,"href","https://www.khronos.org/registry/OpenGL/api/GLES2/gl2.h"),h(fa,"rel","nofollow"),h(va,"href","https://emscripten.org/docs/api_reference/html5.h.html#c.EmscriptenWebGLContextAttributes"),h(va,"rel","nofollow"),h(ta,"class","language-c"),h(Ja,"class","language-c"),h(Xa,"class","language-bash"),Ue(Ra,"width","100%"),Wt(Ra.src,Ks="/blog-2-tri-final.jpg")||h(Ra,"src",Ks),h(Ra,"alt","Final"),h($a,"align","center")},m(u,f){i(u,g,f),a(g,T),i(u,A,f),i(u,v,f),a(v,C),a(v,O),a(O,F),a(v,kn),a(v,z),a(z,hn),a(v,dn),i(u,$,f),i(u,Pa,f),a(Pa,mn),i(u,ss,f),i(u,G,f),a(G,fn),a(G,K),a(K,Da),a(G,wn),i(u,ns,f),i(u,I,f),a(I,bn),a(I,N),a(N,yn),a(I,ca),i(u,Ps,f),i(u,ia,f),a(ia,ua),i(u,Z,f),i(u,ka,f),a(ka,Ds),a(ka,J),a(J,vn),a(ka,ha),i(u,Os,f),i(u,Oa,f),a(Oa,da),a(da,La),i(u,Ls,f),i(u,ma,f),a(ma,U),i(u,Q,f),i(u,Wa,f),a(Wa,ja),a(ja,ts),i(u,Ws,f),i(u,X,f),a(X,js),a(X,aa),a(aa,_n),a(X,zs),a(X,H),a(H,Xe),i(u,es,f),i(u,B,f),a(B,os),a(B,fa),a(fa,Gs),a(B,wa),i(u,jt,f),i(u,ba,f),a(ba,sa),i(u,Ns,f),i(u,P,f),a(P,gn),a(P,ps),a(ps,Hs),a(P,na),a(P,ls),a(ls,ya),a(P,En),a(P,va),a(va,Bs),a(P,za),i(u,Fs,f),i(u,ta,f),ta.innerHTML=x,i(u,Ga,f),i(u,ea,f),a(ea,Tn),a(ea,_a),a(_a,xn),a(ea,Sn),i(u,Na,f),i(u,L,f),a(L,An),a(L,ga),a(ga,In),a(L,Rn),a(L,Ea),a(Ea,Mn),a(L,Cn),a(L,Ta),a(Ta,Pn),a(L,Dn),i(u,Ha,f),i(u,Ba,f),a(Ba,Js),i(u,rs,f),i(u,R,f),a(R,Ys),a(R,Fa),a(Fa,xa),a(R,On),a(R,Sa),a(Sa,Ln),a(R,Us),a(R,w),a(w,cs),a(R,Wn),a(R,is),a(is,us),a(R,jn),i(u,Xs,f),i(u,oa,f),a(oa,Ja),a(Ja,zn),i(u,Aa,f),i(u,qs,f),a(qs,Gn),i(u,Ya,f),i(u,Ua,f),a(Ua,Nn),i(u,Ia,f),i(u,Vs,f),a(Vs,Xa),a(Xa,ks),i(u,$s,f),i(u,qa,f),a(qa,Va),i(u,pa,f),i(u,$a,f),a($a,Ra)},p:Ye,i:Ye,o:Ye,d(u){u&&s(g),u&&s(A),u&&s(v),u&&s($),u&&s(Pa),u&&s(ss),u&&s(G),u&&s(ns),u&&s(I),u&&s(Ps),u&&s(ia),u&&s(Z),u&&s(ka),u&&s(Os),u&&s(Oa),u&&s(Ls),u&&s(ma),u&&s(Q),u&&s(Wa),u&&s(Ws),u&&s(X),u&&s(es),u&&s(B),u&&s(jt),u&&s(ba),u&&s(Ns),u&&s(P),u&&s(Fs),u&&s(ta),u&&s(Ga),u&&s(ea),u&&s(Na),u&&s(L),u&&s(Ha),u&&s(Ba),u&&s(rs),u&&s(R),u&&s(Xs),u&&s(oa),u&&s(Aa),u&&s(qs),u&&s(Ya),u&&s(Ua),u&&s(Ia),u&&s(Vs),u&&s($s),u&&s(qa),u&&s(pa),u&&s($a)}}}const Wf={slug:"2-webgl",title:"WebGL with Emscripten: The Bare Minimum",date:"2021-08-03T00:00:00.000Z",summary:"Illustrating the bare minimum required to get WebGL up and running in C with the Emscripten compiler.",thumbnail:"/blog-2-tri-thumbnail.webp",tags:["WebGL"],author:"Jo Gao"};function jf(V){return console.log("a"),[]}class zf extends Bk{constructor(g){super();Fk(this,g,jf,Lf,Jk,{})}}var Xf=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:zf,metadata:Wf});export{Uf as _,Xf as a};
