import{S as Wa,i as Ia,s as Pa,e as p,j as r,t as n,c as i,a as c,d as e,l as u,g as s,R as ba,D as wa,b as h,f as l,E as a,F as Fe,u as Da,$ as qa}from"../../../chunks/vendor-9801c40e.js";/* empty css                                    */function Ha(Re){let b,L,ze,rt,d,St,y,Ft,Rt,A,zt,Bt,ut,z,Ut,ht,_,Jt,W,Nt,Yt,ft,g,$t,I,Vt,Xt,mt,B,Zt,kt,E,Kt,Z,Qt,te,dt,P,_a=`<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>`,vt,U,ee,bt,D,ga=`<code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten/html5.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;GLES2/gl2.h></span></span></code>`,wt,w,ae,K,ne,se,q,oe,_t,T,le,H,pe,ie,gt,J,ce,Et,m,re,Q,ue,he,tt,fe,me,O,ke,de,Tt,j,Ea=`<code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// beginning of main function</span>

	<span class="token comment">// setting up EmscriptenWebGLContextAttributes</span>
	EmscriptenWebGLContextAttributes attr<span class="token punctuation">;</span>
	<span class="token function">emscripten_webgl_init_context_attributes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	attr<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// target the canvas selector</span>
	EMSCRIPTEN_WEBGL_CONTEXT_HANDLE ctx <span class="token operator">=</span> <span class="token function">emscripten_webgl_create_context</span><span class="token punctuation">(</span><span class="token string">"#canvas"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">emscripten_webgl_make_context_current</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ct,C,ve,et,be,we,xt,k,_e,at,ge,Ee,nt,Te,Ce,st,xe,Ge,Gt,N,Le,Lt,f,ye,ot,Ae,We,lt,Ie,Pe,pt,De,qe,it,He,Oe,yt,M,Ta=`<code class="language-c">	<span class="token comment">// this goes after you have activated the webgl context</span>
	<span class="token function">glClearColor</span><span class="token punctuation">(</span><span class="token number">0.984</span><span class="token punctuation">,</span> <span class="token number">0.4627</span><span class="token punctuation">,</span> <span class="token number">0.502</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">glClear</span><span class="token punctuation">(</span>GL_COLOR_BUFFER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// end of main function</span></code>`,At,Y,je,Wt,$,Me,It,S,Ca='<code class="language-bash">emcc main.c -o index.js</code>',Pt,V,Se,Dt,F,R,Be;return{c(){b=p("div"),L=p("img"),rt=r(),d=p("p"),St=n("The following article is something of a hybrid between the first "),y=p("a"),Ft=n("Emscripten tutorial"),Rt=n(" and the "),A=p("a"),zt=n("Getting Started with WebGL tutorial"),Bt=n(". It builds on the previous documentation to demonstrate how to render the same content in the WebGL tutorial, but in C."),ut=r(),z=p("p"),Ut=n("This is not an Introduction to C programming or WebGL, so a basic understanding of both will be helpful. If you are new to WebGL, I would recommend at least skimming the Getting Started with WebGL tutorial linked above."),ht=r(),_=p("p"),Jt=n("The focus of this article is to illustrate the bare minimum required to get WebGL up and running in C with the Emscripten compiler. And thus, if you do not yet have Emscripten installed, I would suggest doing so now from their "),W=p("a"),Nt=n("download page"),Yt=n("."),ft=r(),g=p("p"),$t=n("The Github repo for this tutorial is available on our "),I=p("a"),Vt=n("Github"),Xt=n("."),mt=r(),B=p("h2"),Zt=n("HTML File"),kt=r(),E=p("p"),Kt=n("The following is a barebones HTML file with a canvas element. The "),Z=p("code"),Qt=n("index.js"),te=n(" script after the canvas is the file that will be generated from compiling the C code."),dt=r(),P=p("pre"),vt=r(),U=p("h2"),ee=n("Header Files"),bt=r(),D=p("pre"),wt=r(),w=p("p"),ae=n("The html5 header provides the bindings required to use html elements and events from native code. For this tutorial, it will allow us to set up the WebGL context in C. You can view the full documentation for "),K=p("code"),ne=n("emscripten/html.5.h"),se=r(),q=p("a"),oe=n("here"),_t=r(),T=p("p"),le=n("The gl2 header provides the functions to draw and interact with the canvas context. The entire header file can be found "),H=p("a"),pe=n("here"),ie=n("."),gt=r(),J=p("h2"),ce=n("Setting up the Canvas"),Et=r(),m=p("p"),re=n("Before we can begin drawing, we must first obtain a canvas context. The html5 header file provides the functions needed to do this. To create a canvas context, the "),Q=p("code"),ue=n("emscripten_webgl_create_context"),he=n(" function takes a target and an "),tt=p("code"),fe=n("EmscriptenWebGLContextAttributes"),me=n(" object, used to specify various attributes for the context. A complete list of the object\u2019s attributes can be found "),O=p("a"),ke=n("here"),de=n("."),Tt=r(),j=p("pre"),Ct=r(),C=p("p"),ve=n("At the start of the main function, we create and initialize the "),et=p("code"),be=n("EmscriptenWebGLContextAttributes"),we=n(" object with all the default attributes settings except the alpha attribute, which is set to false. This is done mostly for the purpose of illustrating how to set specific attributes."),xt=r(),k=p("p"),_e=n("The "),at=p("code"),ge=n("emscripten_webgl_create_context"),Ee=n(" function targets, "),nt=p("code"),Te=n("#canvas"),Ce=n(", the selector for the canvas element in the html file. After creating the context, we must activate it using "),st=p("code"),xe=n("emscripten_webgl_make_context_current"),Ge=n(", to specify that all following GL calls will be applied to that context."),Gt=r(),N=p("h2"),Le=n("Drawing to the Canvas"),Lt=r(),f=p("p"),ye=n("In JavaScript, we would use "),ot=p("code"),Ae=n("clearColor"),We=n(" and "),lt=p("code"),Ie=n("clear"),Pe=n(" on the canvas context to fill in the canvas. The equivalents of these methods are provided by the gl2 header as "),pt=p("code"),De=n("glClearColor"),qe=n(" and "),it=p("code"),He=n("glClear"),Oe=n("."),yt=r(),M=p("pre"),At=r(),Y=p("h2"),je=n("Compiling and Running"),Wt=r(),$=p("p"),Me=n("To compile with Emscripten, run the following command. This will output the index.js file that is sourced from the html file."),It=r(),S=p("pre"),Pt=r(),V=p("p"),Se=n("The html file can now be opened and viewed in a browser. Huzzah!"),Dt=r(),F=p("div"),R=p("img"),this.h()},l(t){b=i(t,"DIV",{align:!0});var o=c(b);L=i(o,"IMG",{style:!0,src:!0,alt:!0}),o.forEach(e),rt=u(t),d=i(t,"P",{});var X=c(d);St=s(X,"The following article is something of a hybrid between the first "),y=i(X,"A",{href:!0,rel:!0});var Ue=c(y);Ft=s(Ue,"Emscripten tutorial"),Ue.forEach(e),Rt=s(X," and the "),A=i(X,"A",{href:!0,rel:!0});var Je=c(A);zt=s(Je,"Getting Started with WebGL tutorial"),Je.forEach(e),Bt=s(X,". It builds on the previous documentation to demonstrate how to render the same content in the WebGL tutorial, but in C."),X.forEach(e),ut=u(t),z=i(t,"P",{});var Ne=c(z);Ut=s(Ne,"This is not an Introduction to C programming or WebGL, so a basic understanding of both will be helpful. If you are new to WebGL, I would recommend at least skimming the Getting Started with WebGL tutorial linked above."),Ne.forEach(e),ht=u(t),_=i(t,"P",{});var qt=c(_);Jt=s(qt,"The focus of this article is to illustrate the bare minimum required to get WebGL up and running in C with the Emscripten compiler. And thus, if you do not yet have Emscripten installed, I would suggest doing so now from their "),W=i(qt,"A",{href:!0,rel:!0});var Ye=c(W);Nt=s(Ye,"download page"),Ye.forEach(e),Yt=s(qt,"."),qt.forEach(e),ft=u(t),g=i(t,"P",{});var Ht=c(g);$t=s(Ht,"The Github repo for this tutorial is available on our "),I=i(Ht,"A",{href:!0,rel:!0});var $e=c(I);Vt=s($e,"Github"),$e.forEach(e),Xt=s(Ht,"."),Ht.forEach(e),mt=u(t),B=i(t,"H2",{});var Ve=c(B);Zt=s(Ve,"HTML File"),Ve.forEach(e),kt=u(t),E=i(t,"P",{});var Ot=c(E);Kt=s(Ot,"The following is a barebones HTML file with a canvas element. The "),Z=i(Ot,"CODE",{});var Xe=c(Z);Qt=s(Xe,"index.js"),Xe.forEach(e),te=s(Ot," script after the canvas is the file that will be generated from compiling the C code."),Ot.forEach(e),dt=u(t),P=i(t,"PRE",{class:!0});var xa=c(P);xa.forEach(e),vt=u(t),U=i(t,"H2",{});var Ze=c(U);ee=s(Ze,"Header Files"),Ze.forEach(e),bt=u(t),D=i(t,"PRE",{class:!0});var Ga=c(D);Ga.forEach(e),wt=u(t),w=i(t,"P",{});var ct=c(w);ae=s(ct,"The html5 header provides the bindings required to use html elements and events from native code. For this tutorial, it will allow us to set up the WebGL context in C. You can view the full documentation for "),K=i(ct,"CODE",{});var Ke=c(K);ne=s(Ke,"emscripten/html.5.h"),Ke.forEach(e),se=u(ct),q=i(ct,"A",{href:!0,rel:!0});var Qe=c(q);oe=s(Qe,"here"),Qe.forEach(e),ct.forEach(e),_t=u(t),T=i(t,"P",{});var jt=c(T);le=s(jt,"The gl2 header provides the functions to draw and interact with the canvas context. The entire header file can be found "),H=i(jt,"A",{href:!0,rel:!0});var ta=c(H);pe=s(ta,"here"),ta.forEach(e),ie=s(jt,"."),jt.forEach(e),gt=u(t),J=i(t,"H2",{});var ea=c(J);ce=s(ea,"Setting up the Canvas"),ea.forEach(e),Et=u(t),m=i(t,"P",{});var x=c(m);re=s(x,"Before we can begin drawing, we must first obtain a canvas context. The html5 header file provides the functions needed to do this. To create a canvas context, the "),Q=i(x,"CODE",{});var aa=c(Q);ue=s(aa,"emscripten_webgl_create_context"),aa.forEach(e),he=s(x," function takes a target and an "),tt=i(x,"CODE",{});var na=c(tt);fe=s(na,"EmscriptenWebGLContextAttributes"),na.forEach(e),me=s(x," object, used to specify various attributes for the context. A complete list of the object\u2019s attributes can be found "),O=i(x,"A",{href:!0,rel:!0});var sa=c(O);ke=s(sa,"here"),sa.forEach(e),de=s(x,"."),x.forEach(e),Tt=u(t),j=i(t,"PRE",{class:!0});var La=c(j);La.forEach(e),Ct=u(t),C=i(t,"P",{});var Mt=c(C);ve=s(Mt,"At the start of the main function, we create and initialize the "),et=i(Mt,"CODE",{});var oa=c(et);be=s(oa,"EmscriptenWebGLContextAttributes"),oa.forEach(e),we=s(Mt," object with all the default attributes settings except the alpha attribute, which is set to false. This is done mostly for the purpose of illustrating how to set specific attributes."),Mt.forEach(e),xt=u(t),k=i(t,"P",{});var G=c(k);_e=s(G,"The "),at=i(G,"CODE",{});var la=c(at);ge=s(la,"emscripten_webgl_create_context"),la.forEach(e),Ee=s(G," function targets, "),nt=i(G,"CODE",{});var pa=c(nt);Te=s(pa,"#canvas"),pa.forEach(e),Ce=s(G,", the selector for the canvas element in the html file. After creating the context, we must activate it using "),st=i(G,"CODE",{});var ia=c(st);xe=s(ia,"emscripten_webgl_make_context_current"),ia.forEach(e),Ge=s(G,", to specify that all following GL calls will be applied to that context."),G.forEach(e),Gt=u(t),N=i(t,"H2",{});var ca=c(N);Le=s(ca,"Drawing to the Canvas"),ca.forEach(e),Lt=u(t),f=i(t,"P",{});var v=c(f);ye=s(v,"In JavaScript, we would use "),ot=i(v,"CODE",{});var ra=c(ot);Ae=s(ra,"clearColor"),ra.forEach(e),We=s(v," and "),lt=i(v,"CODE",{});var ua=c(lt);Ie=s(ua,"clear"),ua.forEach(e),Pe=s(v," on the canvas context to fill in the canvas. The equivalents of these methods are provided by the gl2 header as "),pt=i(v,"CODE",{});var ha=c(pt);De=s(ha,"glClearColor"),ha.forEach(e),qe=s(v," and "),it=i(v,"CODE",{});var fa=c(it);He=s(fa,"glClear"),fa.forEach(e),Oe=s(v,"."),v.forEach(e),yt=u(t),M=i(t,"PRE",{class:!0});var ya=c(M);ya.forEach(e),At=u(t),Y=i(t,"H2",{});var ma=c(Y);je=s(ma,"Compiling and Running"),ma.forEach(e),Wt=u(t),$=i(t,"P",{});var ka=c($);Me=s(ka,"To compile with Emscripten, run the following command. This will output the index.js file that is sourced from the html file."),ka.forEach(e),It=u(t),S=i(t,"PRE",{class:!0});var Aa=c(S);Aa.forEach(e),Pt=u(t),V=i(t,"P",{});var da=c(V);Se=s(da,"The html file can now be opened and viewed in a browser. Huzzah!"),da.forEach(e),Dt=u(t),F=i(t,"DIV",{align:!0});var va=c(F);R=i(va,"IMG",{style:!0,src:!0,alt:!0}),va.forEach(e),this.h()},h(){ba(L,"width","100%"),wa(L.src,ze="/blog-2-tri-thumbnail.webp")||h(L,"src",ze),h(L,"alt","Thumbnail"),h(b,"align","center"),h(y,"href","https://emscripten.org/docs/getting_started/Tutorial.html"),h(y,"rel","nofollow"),h(A,"href","https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL"),h(A,"rel","nofollow"),h(W,"href","https://emscripten.org/docs/getting_started/downloads.html"),h(W,"rel","nofollow"),h(I,"href","https://github.com/AO-Design-Inc/webGL-with-emscripten"),h(I,"rel","nofollow"),h(P,"class","language-html"),h(D,"class","language-c"),h(q,"href","https://emscripten.org/docs/api_reference/html5.h.html"),h(q,"rel","nofollow"),h(H,"href","https://www.khronos.org/registry/OpenGL/api/GLES2/gl2.h"),h(H,"rel","nofollow"),h(O,"href","https://emscripten.org/docs/api_reference/html5.h.html#c.EmscriptenWebGLContextAttributes"),h(O,"rel","nofollow"),h(j,"class","language-c"),h(M,"class","language-c"),h(S,"class","language-bash"),ba(R,"width","100%"),wa(R.src,Be="/blog-2-tri-final.jpg")||h(R,"src",Be),h(R,"alt","Final"),h(F,"align","center")},m(t,o){l(t,b,o),a(b,L),l(t,rt,o),l(t,d,o),a(d,St),a(d,y),a(y,Ft),a(d,Rt),a(d,A),a(A,zt),a(d,Bt),l(t,ut,o),l(t,z,o),a(z,Ut),l(t,ht,o),l(t,_,o),a(_,Jt),a(_,W),a(W,Nt),a(_,Yt),l(t,ft,o),l(t,g,o),a(g,$t),a(g,I),a(I,Vt),a(g,Xt),l(t,mt,o),l(t,B,o),a(B,Zt),l(t,kt,o),l(t,E,o),a(E,Kt),a(E,Z),a(Z,Qt),a(E,te),l(t,dt,o),l(t,P,o),P.innerHTML=_a,l(t,vt,o),l(t,U,o),a(U,ee),l(t,bt,o),l(t,D,o),D.innerHTML=ga,l(t,wt,o),l(t,w,o),a(w,ae),a(w,K),a(K,ne),a(w,se),a(w,q),a(q,oe),l(t,_t,o),l(t,T,o),a(T,le),a(T,H),a(H,pe),a(T,ie),l(t,gt,o),l(t,J,o),a(J,ce),l(t,Et,o),l(t,m,o),a(m,re),a(m,Q),a(Q,ue),a(m,he),a(m,tt),a(tt,fe),a(m,me),a(m,O),a(O,ke),a(m,de),l(t,Tt,o),l(t,j,o),j.innerHTML=Ea,l(t,Ct,o),l(t,C,o),a(C,ve),a(C,et),a(et,be),a(C,we),l(t,xt,o),l(t,k,o),a(k,_e),a(k,at),a(at,ge),a(k,Ee),a(k,nt),a(nt,Te),a(k,Ce),a(k,st),a(st,xe),a(k,Ge),l(t,Gt,o),l(t,N,o),a(N,Le),l(t,Lt,o),l(t,f,o),a(f,ye),a(f,ot),a(ot,Ae),a(f,We),a(f,lt),a(lt,Ie),a(f,Pe),a(f,pt),a(pt,De),a(f,qe),a(f,it),a(it,He),a(f,Oe),l(t,yt,o),l(t,M,o),M.innerHTML=Ta,l(t,At,o),l(t,Y,o),a(Y,je),l(t,Wt,o),l(t,$,o),a($,Me),l(t,It,o),l(t,S,o),S.innerHTML=Ca,l(t,Pt,o),l(t,V,o),a(V,Se),l(t,Dt,o),l(t,F,o),a(F,R)},p:Fe,i:Fe,o:Fe,d(t){t&&e(b),t&&e(rt),t&&e(d),t&&e(ut),t&&e(z),t&&e(ht),t&&e(_),t&&e(ft),t&&e(g),t&&e(mt),t&&e(B),t&&e(kt),t&&e(E),t&&e(dt),t&&e(P),t&&e(vt),t&&e(U),t&&e(bt),t&&e(D),t&&e(wt),t&&e(w),t&&e(_t),t&&e(T),t&&e(gt),t&&e(J),t&&e(Et),t&&e(m),t&&e(Tt),t&&e(j),t&&e(Ct),t&&e(C),t&&e(xt),t&&e(k),t&&e(Gt),t&&e(N),t&&e(Lt),t&&e(f),t&&e(yt),t&&e(M),t&&e(At),t&&e(Y),t&&e(Wt),t&&e($),t&&e(It),t&&e(S),t&&e(Pt),t&&e(V),t&&e(Dt),t&&e(F)}}}const Sa={title:"WebGL with Emscripten: The Bare Minimum",date:"2021-08-03T00:00:00.000Z",summary:"Illustrating the bare minimum required to get WebGL up and running in C with the Emscripten compiler.",thumbnail:"/blog-2-tri-thumbnail.webp",tags:["WebGL"],author:"Jo Gao"};function Oa(Re){return console.log("a"),Da(async()=>{console.log("done"),qa.highlightAll()}),[]}class Fa extends Wa{constructor(b){super();Ia(this,b,Oa,Ha,Pa,{})}}export{Fa as default,Sa as metadata};
